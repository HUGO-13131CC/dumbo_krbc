?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --pid 1648</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="82513"><g><title>poll (multiprocessing/connection.py:256) (88 samples, 0.11%)</title><rect x="0.6399%" y="132" width="0.1066%" height="15" fill="rgb(227,0,7)" fg:x="528" fg:w="88"/><text x="0.8899%" y="142.50"></text></g><g><title>__init__ (selectors.py:347) (233 samples, 0.28%)</title><rect x="1.0847%" y="180" width="0.2824%" height="15" fill="rgb(217,0,24)" fg:x="895" fg:w="233"/><text x="1.3347%" y="190.50"></text></g><g><title>__init__ (selectors.py:212) (105 samples, 0.13%)</title><rect x="1.2398%" y="196" width="0.1273%" height="15" fill="rgb(221,193,54)" fg:x="1023" fg:w="105"/><text x="1.4898%" y="206.50"></text></g><g><title>wait (multiprocessing/connection.py:903) (588 samples, 0.71%)</title><rect x="0.8920%" y="164" width="0.7126%" height="15" fill="rgb(248,212,6)" fg:x="736" fg:w="588"/><text x="1.1420%" y="174.50"></text></g><g><title>__init__ (selectors.py:348) (196 samples, 0.24%)</title><rect x="1.3671%" y="180" width="0.2375%" height="15" fill="rgb(208,68,35)" fg:x="1128" fg:w="196"/><text x="1.6171%" y="190.50"></text></g><g><title>__new__ (&lt;string&gt;:14) (101 samples, 0.12%)</title><rect x="1.9851%" y="212" width="0.1224%" height="15" fill="rgb(232,128,0)" fg:x="1638" fg:w="101"/><text x="2.2351%" y="222.50"></text></g><g><title>register (selectors.py:237) (394 samples, 0.48%)</title><rect x="1.8579%" y="196" width="0.4775%" height="15" fill="rgb(207,160,47)" fg:x="1533" fg:w="394"/><text x="2.1079%" y="206.50"></text></g><g><title>_fileobj_lookup (selectors.py:224) (183 samples, 0.22%)</title><rect x="2.1136%" y="212" width="0.2218%" height="15" fill="rgb(228,23,34)" fg:x="1744" fg:w="183"/><text x="2.3636%" y="222.50"></text></g><g><title>register (selectors.py:351) (581 samples, 0.70%)</title><rect x="1.7343%" y="180" width="0.7041%" height="15" fill="rgb(218,30,26)" fg:x="1431" fg:w="581"/><text x="1.9843%" y="190.50"></text></g><g><title>get_fileno (gevent/select.py:68) (95 samples, 0.12%)</title><rect x="2.6541%" y="212" width="0.1151%" height="15" fill="rgb(220,122,19)" fg:x="2190" fg:w="95"/><text x="2.9041%" y="222.50"></text></g><g><title>register (gevent/select.py:255) (160 samples, 0.19%)</title><rect x="2.6093%" y="196" width="0.1939%" height="15" fill="rgb(250,228,42)" fg:x="2153" fg:w="160"/><text x="2.8593%" y="206.50"></text></g><g><title>wait (multiprocessing/connection.py:905) (978 samples, 1.19%)</title><rect x="1.6325%" y="164" width="1.1853%" height="15" fill="rgb(240,193,28)" fg:x="1347" fg:w="978"/><text x="1.8825%" y="174.50"></text></g><g><title>register (selectors.py:357) (268 samples, 0.32%)</title><rect x="2.4929%" y="180" width="0.3248%" height="15" fill="rgb(216,20,37)" fg:x="2057" fg:w="268"/><text x="2.7429%" y="190.50"></text></g><g><title>poll (gevent/select.py:291) (204 samples, 0.25%)</title><rect x="2.9111%" y="196" width="0.2472%" height="15" fill="rgb(206,188,39)" fg:x="2402" fg:w="204"/><text x="3.1611%" y="206.50"></text></g><g><title>__init__ (gevent/select.py:208) (133 samples, 0.16%)</title><rect x="2.9971%" y="212" width="0.1612%" height="15" fill="rgb(217,207,13)" fg:x="2473" fg:w="133"/><text x="3.2471%" y="222.50"></text></g><g><title>_get_started_watchers (gevent/select.py:267) (89 samples, 0.11%)</title><rect x="3.2565%" y="212" width="0.1079%" height="15" fill="rgb(231,73,38)" fg:x="2687" fg:w="89"/><text x="3.5065%" y="222.50"></text></g><g><title>_get_started_watchers (gevent/select.py:268) (120 samples, 0.15%)</title><rect x="3.3643%" y="212" width="0.1454%" height="15" fill="rgb(225,20,46)" fg:x="2776" fg:w="120"/><text x="3.6143%" y="222.50"></text></g><g><title>poll (gevent/select.py:292) (463 samples, 0.56%)</title><rect x="3.1583%" y="196" width="0.5611%" height="15" fill="rgb(210,31,41)" fg:x="2606" fg:w="463"/><text x="3.4083%" y="206.50"></text></g><g><title>_get_started_watchers (gevent/select.py:271) (96 samples, 0.12%)</title><rect x="3.6031%" y="212" width="0.1163%" height="15" fill="rgb(221,200,47)" fg:x="2973" fg:w="96"/><text x="3.8531%" y="222.50"></text></g><g><title>__exit__ (gevent/timeout.py:358) (163 samples, 0.20%)</title><rect x="3.7424%" y="212" width="0.1975%" height="15" fill="rgb(226,26,5)" fg:x="3088" fg:w="163"/><text x="3.9924%" y="222.50"></text></g><g><title>start_new (gevent/timeout.py:261) (443 samples, 0.54%)</title><rect x="4.0915%" y="228" width="0.5369%" height="15" fill="rgb(249,33,26)" fg:x="3376" fg:w="443"/><text x="4.3415%" y="238.50"></text></g><g><title>__init__ (gevent/timeout.py:218) (231 samples, 0.28%)</title><rect x="4.3484%" y="244" width="0.2800%" height="15" fill="rgb(235,183,28)" fg:x="3588" fg:w="231"/><text x="4.5984%" y="254.50"></text></g><g><title>start (gevent/timeout.py:222) (115 samples, 0.14%)</title><rect x="4.6587%" y="244" width="0.1394%" height="15" fill="rgb(221,5,38)" fg:x="3844" fg:w="115"/><text x="4.9087%" y="254.50"></text></g><g><title>start_new (gevent/timeout.py:262) (309 samples, 0.37%)</title><rect x="4.6284%" y="228" width="0.3745%" height="15" fill="rgb(247,18,42)" fg:x="3819" fg:w="309"/><text x="4.8784%" y="238.50"></text></g><g><title>start (gevent/timeout.py:238) (157 samples, 0.19%)</title><rect x="4.8126%" y="244" width="0.1903%" height="15" fill="rgb(241,131,45)" fg:x="3971" fg:w="157"/><text x="5.0626%" y="254.50"></text></g><g><title>select (selectors.py:376) (1,727 samples, 2.09%)</title><rect x="2.9111%" y="180" width="2.0930%" height="15" fill="rgb(249,31,29)" fg:x="2402" fg:w="1727"/><text x="3.1611%" y="190.50">s..</text></g><g><title>poll (gevent/select.py:314) (1,060 samples, 1.28%)</title><rect x="3.7194%" y="196" width="1.2846%" height="15" fill="rgb(225,111,53)" fg:x="3069" fg:w="1060"/><text x="3.9694%" y="206.50"></text></g><g><title>_start_new_or_dummy (gevent/timeout.py:284) (861 samples, 1.04%)</title><rect x="3.9606%" y="212" width="1.0435%" height="15" fill="rgb(238,160,17)" fg:x="3268" fg:w="861"/><text x="4.2106%" y="222.50"></text></g><g><title>wait (multiprocessing/connection.py:911) (1,791 samples, 2.17%)</title><rect x="2.8408%" y="164" width="2.1706%" height="15" fill="rgb(214,148,48)" fg:x="2344" fg:w="1791"/><text x="3.0908%" y="174.50">w..</text></g><g><title>close (selectors.py:269) (86 samples, 0.10%)</title><rect x="5.3058%" y="196" width="0.1042%" height="15" fill="rgb(232,36,49)" fg:x="4378" fg:w="86"/><text x="5.5558%" y="206.50"></text></g><g><title>_poll (multiprocessing/connection.py:414) (3,868 samples, 4.69%)</title><rect x="0.8071%" y="148" width="4.6877%" height="15" fill="rgb(209,103,24)" fg:x="666" fg:w="3868"/><text x="1.0571%" y="158.50">_poll..</text></g><g><title>wait (multiprocessing/connection.py:918) (304 samples, 0.37%)</title><rect x="5.1265%" y="164" width="0.3684%" height="15" fill="rgb(229,88,8)" fg:x="4230" fg:w="304"/><text x="5.3765%" y="174.50"></text></g><g><title>__exit__ (selectors.py:202) (212 samples, 0.26%)</title><rect x="5.2380%" y="180" width="0.2569%" height="15" fill="rgb(213,181,19)" fg:x="4322" fg:w="212"/><text x="5.4880%" y="190.50"></text></g><g><title>get (multiprocessing/queues.py:104) (4,188 samples, 5.08%)</title><rect x="0.4678%" y="116" width="5.0756%" height="15" fill="rgb(254,191,54)" fg:x="386" fg:w="4188"/><text x="0.7178%" y="126.50">get (m..</text></g><g><title>poll (multiprocessing/connection.py:257) (3,958 samples, 4.80%)</title><rect x="0.7465%" y="132" width="4.7968%" height="15" fill="rgb(241,83,37)" fg:x="616" fg:w="3958"/><text x="0.9965%" y="142.50">poll (..</text></g><g><title>get (multiprocessing/queues.py:105) (96 samples, 0.12%)</title><rect x="5.5434%" y="116" width="0.1163%" height="15" fill="rgb(233,36,39)" fg:x="4574" fg:w="96"/><text x="5.7934%" y="126.50"></text></g><g><title>_recv (multiprocessing/connection.py:379) (2,024 samples, 2.45%)</title><rect x="5.7470%" y="164" width="2.4529%" height="15" fill="rgb(226,3,54)" fg:x="4742" fg:w="2024"/><text x="5.9970%" y="174.50">_r..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:407) (2,072 samples, 2.51%)</title><rect x="5.7215%" y="148" width="2.5111%" height="15" fill="rgb(245,192,40)" fg:x="4721" fg:w="2072"/><text x="5.9715%" y="158.50">_r..</text></g><g><title>_recv (multiprocessing/connection.py:379) (358 samples, 0.43%)</title><rect x="8.2642%" y="164" width="0.4339%" height="15" fill="rgb(238,167,29)" fg:x="6819" fg:w="358"/><text x="8.5142%" y="174.50"></text></g><g><title>recv_bytes (multiprocessing/connection.py:216) (2,478 samples, 3.00%)</title><rect x="5.7118%" y="132" width="3.0032%" height="15" fill="rgb(232,182,51)" fg:x="4713" fg:w="2478"/><text x="5.9618%" y="142.50">rec..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:411) (384 samples, 0.47%)</title><rect x="8.2496%" y="148" width="0.4654%" height="15" fill="rgb(231,60,39)" fg:x="6807" fg:w="384"/><text x="8.4996%" y="158.50"></text></g><g><title>get (multiprocessing/queues.py:108) (2,522 samples, 3.06%)</title><rect x="5.6597%" y="116" width="3.0565%" height="15" fill="rgb(208,69,12)" fg:x="4670" fg:w="2522"/><text x="5.9097%" y="126.50">get..</text></g><g><title>get (multiprocessing/queues.py:111) (120 samples, 0.15%)</title><rect x="8.7247%" y="116" width="0.1454%" height="15" fill="rgb(235,93,37)" fg:x="7199" fg:w="120"/><text x="8.9747%" y="126.50"></text></g><g><title>get (multiprocessing/queues.py:113) (448 samples, 0.54%)</title><rect x="8.8701%" y="116" width="0.5429%" height="15" fill="rgb(213,116,39)" fg:x="7319" fg:w="448"/><text x="9.1201%" y="126.50"></text></g><g><title>_recv_loop (BDT/dumbobft/core/dumbo.py:158) (7,855 samples, 9.52%)</title><rect x="0.0133%" y="68" width="9.5197%" height="15" fill="rgb(222,207,29)" fg:x="11" fg:w="7855"/><text x="0.2633%" y="78.50">_recv_loop (BD..</text></g><g><title>&lt;lambda&gt; (BDT/myexperiements/sockettest/dumbo_node.py:51) (7,722 samples, 9.36%)</title><rect x="0.1745%" y="84" width="9.3585%" height="15" fill="rgb(206,96,30)" fg:x="144" fg:w="7722"/><text x="0.4245%" y="94.50">&lt;lambda&gt; (BDT..</text></g><g><title>&lt;lambda&gt; (run_socket_node.py:118) (7,640 samples, 9.26%)</title><rect x="0.2739%" y="100" width="9.2591%" height="15" fill="rgb(218,138,4)" fg:x="226" fg:w="7640"/><text x="0.5239%" y="110.50">&lt;lambda&gt; (run..</text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:50) (103 samples, 0.12%)</title><rect x="9.7197%" y="68" width="0.1248%" height="15" fill="rgb(250,191,14)" fg:x="8020" fg:w="103"/><text x="9.9697%" y="78.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:56) (97 samples, 0.12%)</title><rect x="9.9378%" y="68" width="0.1176%" height="15" fill="rgb(239,60,40)" fg:x="8200" fg:w="97"/><text x="10.1878%" y="78.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (633 samples, 0.77%)</title><rect x="10.5365%" y="100" width="0.7672%" height="15" fill="rgb(206,27,48)" fg:x="8694" fg:w="633"/><text x="10.7865%" y="110.50"></text></g><g><title>consistentbroadcast (BDT/dumbobft/core/consistentbroadcast.py:126) (839 samples, 1.02%)</title><rect x="10.2893%" y="68" width="1.0168%" height="15" fill="rgb(225,35,8)" fg:x="8490" fg:w="839"/><text x="10.5393%" y="78.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (835 samples, 1.01%)</title><rect x="10.2941%" y="84" width="1.0120%" height="15" fill="rgb(250,213,24)" fg:x="8494" fg:w="835"/><text x="10.5441%" y="94.50"></text></g><g><title>consistentbroadcast (BDT/dumbobft/core/consistentbroadcast.py:92) (126 samples, 0.15%)</title><rect x="11.4115%" y="68" width="0.1527%" height="15" fill="rgb(247,123,22)" fg:x="9416" fg:w="126"/><text x="11.6615%" y="78.50"></text></g><g><title>format (coincurve/keys.py:379) (228 samples, 0.28%)</title><rect x="12.2805%" y="132" width="0.2763%" height="15" fill="rgb(231,138,38)" fg:x="10133" fg:w="228"/><text x="12.5305%" y="142.50"></text></g><g><title>format (coincurve/keys.py:380) (105 samples, 0.13%)</title><rect x="12.5568%" y="132" width="0.1273%" height="15" fill="rgb(231,145,46)" fg:x="10361" fg:w="105"/><text x="12.8068%" y="142.50"></text></g><g><title>format (coincurve/keys.py:383) (245 samples, 0.30%)</title><rect x="12.7374%" y="132" width="0.2969%" height="15" fill="rgb(251,118,11)" fg:x="10510" fg:w="245"/><text x="12.9874%" y="142.50"></text></g><g><title>format (coincurve/keys.py:386) (176 samples, 0.21%)</title><rect x="13.0343%" y="132" width="0.2133%" height="15" fill="rgb(217,147,25)" fg:x="10755" fg:w="176"/><text x="13.2843%" y="142.50"></text></g><g><title>hash (BDT/crypto/ecdsa/ecdsa.py:11) (297 samples, 0.36%)</title><rect x="13.2609%" y="132" width="0.3599%" height="15" fill="rgb(247,81,37)" fg:x="10942" fg:w="297"/><text x="13.5109%" y="142.50"></text></g><g><title>hash (BDT/crypto/ecdsa/ecdsa.py:8) (144 samples, 0.17%)</title><rect x="13.7287%" y="132" width="0.1745%" height="15" fill="rgb(209,12,38)" fg:x="11328" fg:w="144"/><text x="13.9787%" y="142.50"></text></g><g><title>verify_signature (coincurve/utils.py:111) (1,242 samples, 1.51%)</title><rect x="14.0366%" y="132" width="1.5052%" height="15" fill="rgb(227,1,9)" fg:x="11582" fg:w="1242"/><text x="14.2866%" y="142.50"></text></g><g><title>verify_signature (coincurve/utils.py:116) (204 samples, 0.25%)</title><rect x="15.5479%" y="132" width="0.2472%" height="15" fill="rgb(248,47,43)" fg:x="12829" fg:w="204"/><text x="15.7979%" y="142.50"></text></g><g><title>sha256 (coincurve/utils.py:26) (175 samples, 0.21%)</title><rect x="15.5830%" y="148" width="0.2121%" height="15" fill="rgb(221,10,30)" fg:x="12858" fg:w="175"/><text x="15.8330%" y="158.50"></text></g><g><title>verify_signature (coincurve/utils.py:120) (99 samples, 0.12%)</title><rect x="15.8181%" y="132" width="0.1200%" height="15" fill="rgb(210,229,1)" fg:x="13052" fg:w="99"/><text x="16.0681%" y="142.50"></text></g><g><title>verify_signature (coincurve/utils.py:122) (116 samples, 0.14%)</title><rect x="15.9381%" y="132" width="0.1406%" height="15" fill="rgb(222,148,37)" fg:x="13151" fg:w="116"/><text x="16.1881%" y="142.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (10,611 samples, 12.86%)</title><rect x="16.0872%" y="132" width="12.8598%" height="15" fill="rgb(234,67,33)" fg:x="13274" fg:w="10611"/><text x="16.3372%" y="142.50">verify_signature (c..</text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:14) (14,112 samples, 17.10%)</title><rect x="11.8636%" y="100" width="17.1028%" height="15" fill="rgb(247,98,35)" fg:x="9789" fg:w="14112"/><text x="12.1136%" y="110.50">prbc_validate (BDT/dumbobf..</text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (14,014 samples, 16.98%)</title><rect x="11.9824%" y="116" width="16.9840%" height="15" fill="rgb(247,138,52)" fg:x="9887" fg:w="14014"/><text x="12.2324%" y="126.50">ecdsa_vrfy (BDT/crypto/ecd..</text></g><g><title>vacs_predicate (BDT/dumbobft/core/dumbo.py:388) (14,331 samples, 17.37%)</title><rect x="11.6018%" y="84" width="17.3682%" height="15" fill="rgb(213,79,30)" fg:x="9573" fg:w="14331"/><text x="11.8518%" y="94.50">vacs_predicate (BDT/dumbobf..</text></g><g><title>predicate_pt (BDT/dumbobft/core/validatedcommonsubset_.py:142) (14,382 samples, 17.43%)</title><rect x="11.5655%" y="68" width="17.4300%" height="15" fill="rgb(246,177,23)" fg:x="9543" fg:w="14382"/><text x="11.8155%" y="78.50">predicate_pt (BDT/dumbobft/..</text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:138) (113 samples, 0.14%)</title><rect x="29.0972%" y="68" width="0.1369%" height="15" fill="rgb(230,62,27)" fg:x="24009" fg:w="113"/><text x="29.3472%" y="78.50"></text></g><g><title>broadcast (BDT/dumbobft/core/provablereliablebroadcast.py:81) (113 samples, 0.14%)</title><rect x="29.0972%" y="84" width="0.1369%" height="15" fill="rgb(216,154,8)" fg:x="24009" fg:w="113"/><text x="29.3472%" y="94.50"></text></g><g><title>prbc_send (BDT/dumbobft/core/dumbo.py:304) (113 samples, 0.14%)</title><rect x="29.0972%" y="100" width="0.1369%" height="15" fill="rgb(244,35,45)" fg:x="24009" fg:w="113"/><text x="29.3472%" y="110.50"></text></g><g><title>_send (BDT/dumbobft/core/dumbo.py:207) (113 samples, 0.14%)</title><rect x="29.0972%" y="116" width="0.1369%" height="15" fill="rgb(251,115,12)" fg:x="24009" fg:w="113"/><text x="29.3472%" y="126.50"></text></g><g><title>&lt;lambda&gt; (BDT/myexperiements/sockettest/dumbo_node.py:50) (112 samples, 0.14%)</title><rect x="29.0984%" y="132" width="0.1357%" height="15" fill="rgb(240,54,50)" fg:x="24010" fg:w="112"/><text x="29.3484%" y="142.50"></text></g><g><title>put_nowait (multiprocessing/queues.py:129) (112 samples, 0.14%)</title><rect x="29.0984%" y="148" width="0.1357%" height="15" fill="rgb(233,84,52)" fg:x="24010" fg:w="112"/><text x="29.3484%" y="158.50"></text></g><g><title>put (multiprocessing/queues.py:89) (110 samples, 0.13%)</title><rect x="29.1009%" y="164" width="0.1333%" height="15" fill="rgb(207,117,47)" fg:x="24012" fg:w="110"/><text x="29.3509%" y="174.50"></text></g><g><title>notify (threading.py:351) (107 samples, 0.13%)</title><rect x="29.1045%" y="180" width="0.1297%" height="15" fill="rgb(249,43,39)" fg:x="24015" fg:w="107"/><text x="29.3545%" y="190.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:148) (122 samples, 0.15%)</title><rect x="29.2499%" y="68" width="0.1479%" height="15" fill="rgb(209,38,44)" fg:x="24135" fg:w="122"/><text x="29.4999%" y="78.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:162) (113 samples, 0.14%)</title><rect x="29.4366%" y="68" width="0.1369%" height="15" fill="rgb(236,212,23)" fg:x="24289" fg:w="113"/><text x="29.6866%" y="78.50"></text></g><g><title>prbc_send (BDT/dumbobft/core/dumbo.py:304) (112 samples, 0.14%)</title><rect x="29.4378%" y="84" width="0.1357%" height="15" fill="rgb(242,79,21)" fg:x="24290" fg:w="112"/><text x="29.6878%" y="94.50"></text></g><g><title>_send (BDT/dumbobft/core/dumbo.py:207) (110 samples, 0.13%)</title><rect x="29.4402%" y="100" width="0.1333%" height="15" fill="rgb(211,96,35)" fg:x="24292" fg:w="110"/><text x="29.6902%" y="110.50"></text></g><g><title>&lt;lambda&gt; (BDT/myexperiements/sockettest/dumbo_node.py:50) (110 samples, 0.13%)</title><rect x="29.4402%" y="116" width="0.1333%" height="15" fill="rgb(253,215,40)" fg:x="24292" fg:w="110"/><text x="29.6902%" y="126.50"></text></g><g><title>put_nowait (multiprocessing/queues.py:129) (110 samples, 0.13%)</title><rect x="29.4402%" y="132" width="0.1333%" height="15" fill="rgb(211,81,21)" fg:x="24292" fg:w="110"/><text x="29.6902%" y="142.50"></text></g><g><title>put (multiprocessing/queues.py:89) (110 samples, 0.13%)</title><rect x="29.4402%" y="148" width="0.1333%" height="15" fill="rgb(208,190,38)" fg:x="24292" fg:w="110"/><text x="29.6902%" y="158.50"></text></g><g><title>notify (threading.py:351) (110 samples, 0.13%)</title><rect x="29.4402%" y="164" width="0.1333%" height="15" fill="rgb(235,213,38)" fg:x="24292" fg:w="110"/><text x="29.6902%" y="174.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:175) (477 samples, 0.58%)</title><rect x="29.6402%" y="68" width="0.5781%" height="15" fill="rgb(237,122,38)" fg:x="24457" fg:w="477"/><text x="29.8902%" y="78.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (468 samples, 0.57%)</title><rect x="29.6511%" y="84" width="0.5672%" height="15" fill="rgb(244,218,35)" fg:x="24466" fg:w="468"/><text x="29.9011%" y="94.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (297 samples, 0.36%)</title><rect x="29.8583%" y="100" width="0.3599%" height="15" fill="rgb(240,68,47)" fg:x="24637" fg:w="297"/><text x="30.1083%" y="110.50"></text></g><g><title>deserialize (charm/toolbox/pairinggroup.py:129) (167 samples, 0.20%)</title><rect x="30.3855%" y="180" width="0.2024%" height="15" fill="rgb(210,16,53)" fg:x="25072" fg:w="167"/><text x="30.6355%" y="190.50"></text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:103) (186 samples, 0.23%)</title><rect x="30.3795%" y="116" width="0.2254%" height="15" fill="rgb(235,124,12)" fg:x="25067" fg:w="186"/><text x="30.6295%" y="126.50"></text></g><g><title>&lt;listcomp&gt; (BDT/honeybadgerbft/core/honeybadger_block.py:103) (186 samples, 0.23%)</title><rect x="30.3795%" y="132" width="0.2254%" height="15" fill="rgb(224,169,11)" fg:x="25067" fg:w="186"/><text x="30.6295%" y="142.50"></text></g><g><title>tpke_deserialize (BDT/honeybadgerbft/core/honeybadger_block.py:21) (186 samples, 0.23%)</title><rect x="30.3795%" y="148" width="0.2254%" height="15" fill="rgb(250,166,2)" fg:x="25067" fg:w="186"/><text x="30.6295%" y="158.50"></text></g><g><title>deserialize1 (BDT/crypto/threshenc/tpke.py:44) (186 samples, 0.23%)</title><rect x="30.3795%" y="164" width="0.2254%" height="15" fill="rgb(242,216,29)" fg:x="25067" fg:w="186"/><text x="30.6295%" y="174.50"></text></g><g><title>combine_shares (BDT/crypto/threshenc/tpke.py:163) (3,652 samples, 4.43%)</title><rect x="30.6376%" y="132" width="4.4260%" height="15" fill="rgb(230,116,27)" fg:x="25280" fg:w="3652"/><text x="30.8876%" y="142.50">combi..</text></g><g><title>verify_share (BDT/crypto/threshenc/tpke.py:149) (3,639 samples, 4.41%)</title><rect x="30.6534%" y="148" width="4.4102%" height="15" fill="rgb(228,99,48)" fg:x="25293" fg:w="3639"/><text x="30.9034%" y="158.50">verif..</text></g><g><title>combine_shares (BDT/crypto/threshenc/tpke.py:167) (2,916 samples, 3.53%)</title><rect x="35.0636%" y="132" width="3.5340%" height="15" fill="rgb(253,11,6)" fg:x="28932" fg:w="2916"/><text x="35.3136%" y="142.50">com..</text></g><g><title>&lt;listcomp&gt; (BDT/crypto/threshenc/tpke.py:167) (2,886 samples, 3.50%)</title><rect x="35.0999%" y="148" width="3.4976%" height="15" fill="rgb(247,143,39)" fg:x="28962" fg:w="2886"/><text x="35.3499%" y="158.50">&lt;li..</text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:123) (6,585 samples, 7.98%)</title><rect x="30.6327%" y="116" width="7.9806%" height="15" fill="rgb(236,97,10)" fg:x="25276" fg:w="6585"/><text x="30.8827%" y="126.50">honeybadger..</text></g><g><title>hash (charm/toolbox/pairinggroup.py:98) (404 samples, 0.49%)</title><rect x="38.7066%" y="180" width="0.4896%" height="15" fill="rgb(233,208,19)" fg:x="31938" fg:w="404"/><text x="38.9566%" y="190.50"></text></g><g><title>verify_ciphertext (BDT/crypto/threshenc/tpke.py:141) (416 samples, 0.50%)</title><rect x="38.7030%" y="148" width="0.5042%" height="15" fill="rgb(216,164,2)" fg:x="31935" fg:w="416"/><text x="38.9530%" y="158.50"></text></g><g><title>hashH (BDT/crypto/threshenc/tpke.py:80) (415 samples, 0.50%)</title><rect x="38.7042%" y="164" width="0.5030%" height="15" fill="rgb(220,129,5)" fg:x="31936" fg:w="415"/><text x="38.9542%" y="174.50"></text></g><g><title>decrypt_share (BDT/crypto/threshenc/tpke.py:199) (657 samples, 0.80%)</title><rect x="38.7030%" y="132" width="0.7962%" height="15" fill="rgb(242,17,10)" fg:x="31935" fg:w="657"/><text x="38.9530%" y="142.50"></text></g><g><title>verify_ciphertext (BDT/crypto/threshenc/tpke.py:142) (241 samples, 0.29%)</title><rect x="39.2072%" y="148" width="0.2921%" height="15" fill="rgb(242,107,0)" fg:x="32351" fg:w="241"/><text x="39.4572%" y="158.50"></text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:92) (864 samples, 1.05%)</title><rect x="38.7018%" y="116" width="1.0471%" height="15" fill="rgb(251,28,31)" fg:x="31934" fg:w="864"/><text x="38.9518%" y="126.50"></text></g><g><title>decrypt_share (BDT/crypto/threshenc/tpke.py:204) (206 samples, 0.25%)</title><rect x="39.4992%" y="132" width="0.2497%" height="15" fill="rgb(233,223,10)" fg:x="32592" fg:w="206"/><text x="39.7492%" y="142.50"></text></g><g><title>_run_round (BDT/dumbobft/core/dumbo.py:443) (7,741 samples, 9.38%)</title><rect x="30.3734%" y="100" width="9.3816%" height="15" fill="rgb(215,21,27)" fg:x="25062" fg:w="7741"/><text x="30.6234%" y="110.50">_run_round (B..</text></g><g><title>run_bft (BDT/dumbobft/core/dumbo.py:212) (7,750 samples, 9.39%)</title><rect x="30.3685%" y="84" width="9.3925%" height="15" fill="rgb(232,23,21)" fg:x="25058" fg:w="7750"/><text x="30.6185%" y="94.50">run_bft (BDT/..</text></g><g><title>run (BDT/myexperiements/sockettest/dumbo_node.py:86) (7,752 samples, 9.39%)</title><rect x="30.3685%" y="68" width="9.3949%" height="15" fill="rgb(244,5,23)" fg:x="25058" fg:w="7752"/><text x="30.6185%" y="78.50">run (BDT/myex..</text></g><g><title>_on_expiration (gevent/timeout.py:242) (522 samples, 0.63%)</title><rect x="58.3932%" y="84" width="0.6326%" height="15" fill="rgb(226,81,46)" fg:x="48182" fg:w="522"/><text x="58.6432%" y="94.50"></text></g><g><title>run (gevent/hub.py:647) (15,980 samples, 19.37%)</title><rect x="39.7634%" y="68" width="19.3666%" height="15" fill="rgb(247,70,30)" fg:x="32810" fg:w="15980"/><text x="40.0134%" y="78.50">run (gevent/hub.py:647)</text></g><g><title>verify_signature (coincurve/utils.py:127) (240 samples, 0.29%)</title><rect x="59.2282%" y="116" width="0.2909%" height="15" fill="rgb(212,68,19)" fg:x="48871" fg:w="240"/><text x="59.4782%" y="126.50"></text></g><g><title>vacs_predicate (BDT/dumbobft/core/dumbo.py:388) (302 samples, 0.37%)</title><rect x="59.1543%" y="68" width="0.3660%" height="15" fill="rgb(240,187,13)" fg:x="48810" fg:w="302"/><text x="59.4043%" y="78.50"></text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:14) (293 samples, 0.36%)</title><rect x="59.1652%" y="84" width="0.3551%" height="15" fill="rgb(223,113,26)" fg:x="48819" fg:w="293"/><text x="59.4152%" y="94.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (290 samples, 0.35%)</title><rect x="59.1689%" y="100" width="0.3515%" height="15" fill="rgb(206,192,2)" fg:x="48822" fg:w="290"/><text x="59.4189%" y="110.50"></text></g><g><title>validatedagreement (BDT/dumbobft/core/validatedagreement_.py:337) (291 samples, 0.35%)</title><rect x="59.5397%" y="68" width="0.3527%" height="15" fill="rgb(241,108,4)" fg:x="49128" fg:w="291"/><text x="59.7897%" y="78.50"></text></g><g><title>cbc_validate (BDT/dumbobft/core/validators.py:25) (255 samples, 0.31%)</title><rect x="59.5833%" y="84" width="0.3090%" height="15" fill="rgb(247,173,49)" fg:x="49164" fg:w="255"/><text x="59.8333%" y="94.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (253 samples, 0.31%)</title><rect x="59.5858%" y="100" width="0.3066%" height="15" fill="rgb(224,114,35)" fg:x="49166" fg:w="253"/><text x="59.8358%" y="110.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (174 samples, 0.21%)</title><rect x="59.6815%" y="116" width="0.2109%" height="15" fill="rgb(245,159,27)" fg:x="49245" fg:w="174"/><text x="59.9315%" y="126.50"></text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:149) (89 samples, 0.11%)</title><rect x="59.9348%" y="84" width="0.1079%" height="15" fill="rgb(245,172,44)" fg:x="49454" fg:w="89"/><text x="60.1848%" y="94.50"></text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:155) (5,413 samples, 6.56%)</title><rect x="60.0487%" y="84" width="6.5602%" height="15" fill="rgb(236,23,11)" fg:x="49548" fg:w="5413"/><text x="60.2987%" y="94.50">vaba_pred..</text></g><g><title>sleep (gevent/hub.py:154) (1,848 samples, 2.24%)</title><rect x="69.9696%" y="100" width="2.2396%" height="15" fill="rgb(205,117,38)" fg:x="57734" fg:w="1848"/><text x="70.2196%" y="110.50">s..</text></g><g><title>sleep (gevent/hub.py:155) (530 samples, 0.64%)</title><rect x="72.2092%" y="100" width="0.6423%" height="15" fill="rgb(237,72,25)" fg:x="59582" fg:w="530"/><text x="72.4592%" y="110.50"></text></g><g><title>sleep (gevent/hub.py:156) (304 samples, 0.37%)</title><rect x="72.8516%" y="100" width="0.3684%" height="15" fill="rgb(244,70,9)" fg:x="60112" fg:w="304"/><text x="73.1016%" y="110.50"></text></g><g><title>sleep (gevent/hub.py:157) (1,617 samples, 1.96%)</title><rect x="73.2200%" y="100" width="1.9597%" height="15" fill="rgb(217,125,39)" fg:x="60416" fg:w="1617"/><text x="73.4700%" y="110.50">s..</text></g><g><title>sleep (gevent/hub.py:158) (3,972 samples, 4.81%)</title><rect x="75.1797%" y="100" width="4.8138%" height="15" fill="rgb(235,36,10)" fg:x="62033" fg:w="3972"/><text x="75.4297%" y="110.50">sleep ..</text></g><g><title>sleep (gevent/hub.py:159) (16,112 samples, 19.53%)</title><rect x="79.9935%" y="100" width="19.5266%" height="15" fill="rgb(251,123,47)" fg:x="66005" fg:w="16112"/><text x="80.2435%" y="110.50">sleep (gevent/hub.py:159)</text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:158) (27,306 samples, 33.09%)</title><rect x="66.6089%" y="84" width="33.0930%" height="15" fill="rgb(221,13,13)" fg:x="54961" fg:w="27306"/><text x="66.8589%" y="94.50">vaba_predicate (BDT/dumbobft/core/validatedcommonsubse..</text></g><g><title>sleep (gevent/hub.py:166) (150 samples, 0.18%)</title><rect x="99.5201%" y="100" width="0.1818%" height="15" fill="rgb(238,131,9)" fg:x="82117" fg:w="150"/><text x="99.7701%" y="110.50"></text></g><g><title>wait_for_cbc_to_continue (BDT/dumbobft/core/validatedagreement_.py:219) (33,048 samples, 40.05%)</title><rect x="59.9312%" y="68" width="40.0519%" height="15" fill="rgb(211,50,8)" fg:x="49451" fg:w="33048"/><text x="60.1812%" y="78.50">wait_for_cbc_to_continue (BDT/dumbobft/core/validatedagreement_.p..</text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:161) (200 samples, 0.24%)</title><rect x="99.7406%" y="84" width="0.2424%" height="15" fill="rgb(245,182,24)" fg:x="82299" fg:w="200"/><text x="99.9906%" y="94.50"></text></g><g><title>all (82,513 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="82513"/><text x="0.2500%" y="62.50"></text></g></svg></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --pid 2476</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="60488"><g><title>_recv (BDT/honeybadgerbft/core/commoncoin.py:62) (3,131 samples, 5.18%)</title><rect x="0.1157%" y="68" width="5.1762%" height="15" fill="rgb(227,0,7)" fg:x="70" fg:w="3131"/><text x="0.3657%" y="78.50">_recv ..</text></g><g><title>verify_share (BDT/crypto/threshsig/boldyreva.py:132) (3,127 samples, 5.17%)</title><rect x="0.1223%" y="84" width="5.1696%" height="15" fill="rgb(217,0,24)" fg:x="74" fg:w="3127"/><text x="0.3723%" y="94.50">verify..</text></g><g><title>_recv (BDT/honeybadgerbft/core/commoncoin.py:80) (117 samples, 0.19%)</title><rect x="5.2986%" y="68" width="0.1934%" height="15" fill="rgb(221,193,54)" fg:x="3205" fg:w="117"/><text x="5.5486%" y="78.50"></text></g><g><title>combine_shares (BDT/crypto/threshsig/boldyreva.py:148) (116 samples, 0.19%)</title><rect x="5.3002%" y="84" width="0.1918%" height="15" fill="rgb(248,212,6)" fg:x="3206" fg:w="116"/><text x="5.5502%" y="94.50"></text></g><g><title>&lt;listcomp&gt; (BDT/crypto/threshsig/boldyreva.py:148) (113 samples, 0.19%)</title><rect x="5.3052%" y="100" width="0.1868%" height="15" fill="rgb(208,68,35)" fg:x="3209" fg:w="113"/><text x="5.5552%" y="110.50"></text></g><g><title>__init__ (selectors.py:347) (76 samples, 0.13%)</title><rect x="6.0276%" y="180" width="0.1256%" height="15" fill="rgb(232,128,0)" fg:x="3646" fg:w="76"/><text x="6.2776%" y="190.50"></text></g><g><title>wait (multiprocessing/connection.py:903) (185 samples, 0.31%)</title><rect x="5.9764%" y="164" width="0.3058%" height="15" fill="rgb(207,160,47)" fg:x="3615" fg:w="185"/><text x="6.2264%" y="174.50"></text></g><g><title>__init__ (selectors.py:348) (78 samples, 0.13%)</title><rect x="6.1533%" y="180" width="0.1290%" height="15" fill="rgb(228,23,34)" fg:x="3722" fg:w="78"/><text x="6.4033%" y="190.50"></text></g><g><title>register (selectors.py:237) (111 samples, 0.18%)</title><rect x="6.4062%" y="196" width="0.1835%" height="15" fill="rgb(218,30,26)" fg:x="3875" fg:w="111"/><text x="6.6562%" y="206.50"></text></g><g><title>register (selectors.py:351) (166 samples, 0.27%)</title><rect x="6.3368%" y="180" width="0.2744%" height="15" fill="rgb(220,122,19)" fg:x="3833" fg:w="166"/><text x="6.5868%" y="190.50"></text></g><g><title>get_fileno (gevent/select.py:68) (80 samples, 0.13%)</title><rect x="6.7253%" y="212" width="0.1323%" height="15" fill="rgb(250,228,42)" fg:x="4068" fg:w="80"/><text x="6.9753%" y="222.50"></text></g><g><title>register (gevent/select.py:255) (119 samples, 0.20%)</title><rect x="6.6939%" y="196" width="0.1967%" height="15" fill="rgb(240,193,28)" fg:x="4049" fg:w="119"/><text x="6.9439%" y="206.50"></text></g><g><title>wait (multiprocessing/connection.py:905) (365 samples, 0.60%)</title><rect x="6.2971%" y="164" width="0.6034%" height="15" fill="rgb(216,20,37)" fg:x="3809" fg:w="365"/><text x="6.5471%" y="174.50"></text></g><g><title>register (selectors.py:357) (161 samples, 0.27%)</title><rect x="6.6344%" y="180" width="0.2662%" height="15" fill="rgb(206,188,39)" fg:x="4013" fg:w="161"/><text x="6.8844%" y="190.50"></text></g><g><title>poll (gevent/select.py:291) (103 samples, 0.17%)</title><rect x="6.9435%" y="196" width="0.1703%" height="15" fill="rgb(217,207,13)" fg:x="4200" fg:w="103"/><text x="7.1935%" y="206.50"></text></g><g><title>__init__ (gevent/select.py:208) (78 samples, 0.13%)</title><rect x="6.9849%" y="212" width="0.1290%" height="15" fill="rgb(231,73,38)" fg:x="4225" fg:w="78"/><text x="7.2349%" y="222.50"></text></g><g><title>poll (gevent/select.py:292) (162 samples, 0.27%)</title><rect x="7.1138%" y="196" width="0.2678%" height="15" fill="rgb(225,20,46)" fg:x="4303" fg:w="162"/><text x="7.3638%" y="206.50"></text></g><g><title>__exit__ (gevent/timeout.py:358) (118 samples, 0.20%)</title><rect x="7.4180%" y="212" width="0.1951%" height="15" fill="rgb(210,31,41)" fg:x="4487" fg:w="118"/><text x="7.6680%" y="222.50"></text></g><g><title>start_new (gevent/timeout.py:261) (164 samples, 0.27%)</title><rect x="7.6825%" y="228" width="0.2711%" height="15" fill="rgb(221,200,47)" fg:x="4647" fg:w="164"/><text x="7.9325%" y="238.50"></text></g><g><title>__init__ (gevent/timeout.py:218) (72 samples, 0.12%)</title><rect x="7.8346%" y="244" width="0.1190%" height="15" fill="rgb(226,26,5)" fg:x="4739" fg:w="72"/><text x="8.0846%" y="254.50"></text></g><g><title>select (selectors.py:376) (727 samples, 1.20%)</title><rect x="6.9435%" y="180" width="1.2019%" height="15" fill="rgb(249,33,26)" fg:x="4200" fg:w="727"/><text x="7.1935%" y="190.50"></text></g><g><title>poll (gevent/select.py:314) (462 samples, 0.76%)</title><rect x="7.3816%" y="196" width="0.7638%" height="15" fill="rgb(235,183,28)" fg:x="4465" fg:w="462"/><text x="7.6316%" y="206.50"></text></g><g><title>_start_new_or_dummy (gevent/timeout.py:284) (314 samples, 0.52%)</title><rect x="7.6263%" y="212" width="0.5191%" height="15" fill="rgb(221,5,38)" fg:x="4613" fg:w="314"/><text x="7.8763%" y="222.50"></text></g><g><title>start_new (gevent/timeout.py:262) (116 samples, 0.19%)</title><rect x="7.9536%" y="228" width="0.1918%" height="15" fill="rgb(247,18,42)" fg:x="4811" fg:w="116"/><text x="8.2036%" y="238.50"></text></g><g><title>start (gevent/timeout.py:238) (62 samples, 0.10%)</title><rect x="8.0429%" y="244" width="0.1025%" height="15" fill="rgb(241,131,45)" fg:x="4865" fg:w="62"/><text x="8.2929%" y="254.50"></text></g><g><title>wait (multiprocessing/connection.py:911) (762 samples, 1.26%)</title><rect x="6.9154%" y="164" width="1.2598%" height="15" fill="rgb(249,31,29)" fg:x="4183" fg:w="762"/><text x="7.1654%" y="174.50"></text></g><g><title>_poll (multiprocessing/connection.py:414) (1,516 samples, 2.51%)</title><rect x="5.9053%" y="148" width="2.5063%" height="15" fill="rgb(225,111,53)" fg:x="3572" fg:w="1516"/><text x="6.1553%" y="158.50">_p..</text></g><g><title>wait (multiprocessing/connection.py:918) (104 samples, 0.17%)</title><rect x="8.2397%" y="164" width="0.1719%" height="15" fill="rgb(238,160,17)" fg:x="4984" fg:w="104"/><text x="8.4897%" y="174.50"></text></g><g><title>__exit__ (selectors.py:202) (86 samples, 0.14%)</title><rect x="8.2694%" y="180" width="0.1422%" height="15" fill="rgb(214,148,48)" fg:x="5002" fg:w="86"/><text x="8.5194%" y="190.50"></text></g><g><title>get (multiprocessing/queues.py:104) (1,607 samples, 2.66%)</title><rect x="5.7912%" y="116" width="2.6567%" height="15" fill="rgb(232,36,49)" fg:x="3503" fg:w="1607"/><text x="6.0412%" y="126.50">ge..</text></g><g><title>poll (multiprocessing/connection.py:257) (1,554 samples, 2.57%)</title><rect x="5.8789%" y="132" width="2.5691%" height="15" fill="rgb(209,103,24)" fg:x="3556" fg:w="1554"/><text x="6.1289%" y="142.50">po..</text></g><g><title>_recv (multiprocessing/connection.py:379) (4,216 samples, 6.97%)</title><rect x="8.6778%" y="164" width="6.9700%" height="15" fill="rgb(229,88,8)" fg:x="5249" fg:w="4216"/><text x="8.9278%" y="174.50">_recv (mu..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:407) (4,296 samples, 7.10%)</title><rect x="8.6001%" y="148" width="7.1022%" height="15" fill="rgb(213,181,19)" fg:x="5202" fg:w="4296"/><text x="8.8501%" y="158.50">_recv_byte..</text></g><g><title>_recv (multiprocessing/connection.py:379) (872 samples, 1.44%)</title><rect x="15.8329%" y="164" width="1.4416%" height="15" fill="rgb(254,191,54)" fg:x="9577" fg:w="872"/><text x="16.0829%" y="174.50"></text></g><g><title>recv_bytes (multiprocessing/connection.py:216) (5,294 samples, 8.75%)</title><rect x="8.5703%" y="132" width="8.7521%" height="15" fill="rgb(241,83,37)" fg:x="5184" fg:w="5294"/><text x="8.8203%" y="142.50">recv_bytes (..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:411) (923 samples, 1.53%)</title><rect x="15.7965%" y="148" width="1.5259%" height="15" fill="rgb(233,36,39)" fg:x="9555" fg:w="923"/><text x="16.0465%" y="158.50"></text></g><g><title>get (multiprocessing/queues.py:108) (5,367 samples, 8.87%)</title><rect x="8.4711%" y="116" width="8.8728%" height="15" fill="rgb(226,3,54)" fg:x="5124" fg:w="5367"/><text x="8.7211%" y="126.50">get (multipro..</text></g><g><title>get (multiprocessing/queues.py:113) (581 samples, 0.96%)</title><rect x="17.4084%" y="116" width="0.9605%" height="15" fill="rgb(245,192,40)" fg:x="10530" fg:w="581"/><text x="17.6584%" y="126.50"></text></g><g><title>_recv_loop (BDT/dumbobft/core/dumbo.py:158) (7,787 samples, 12.87%)</title><rect x="5.5912%" y="68" width="12.8736%" height="15" fill="rgb(238,167,29)" fg:x="3382" fg:w="7787"/><text x="5.8412%" y="78.50">_recv_loop (BDT/dum..</text></g><g><title>&lt;lambda&gt; (BDT/myexperiements/sockettest/dumbo_node.py:51) (7,741 samples, 12.80%)</title><rect x="5.6672%" y="84" width="12.7976%" height="15" fill="rgb(232,182,51)" fg:x="3428" fg:w="7741"/><text x="5.9172%" y="94.50">&lt;lambda&gt; (BDT/myexp..</text></g><g><title>&lt;lambda&gt; (run_socket_node.py:118) (7,714 samples, 12.75%)</title><rect x="5.7119%" y="100" width="12.7529%" height="15" fill="rgb(231,60,39)" fg:x="3455" fg:w="7714"/><text x="5.9619%" y="110.50">&lt;lambda&gt; (run_socke..</text></g><g><title>_recv_loop (BDT/dumbobft/core/dumbo.py:165) (105 samples, 0.17%)</title><rect x="18.4913%" y="68" width="0.1736%" height="15" fill="rgb(208,69,12)" fg:x="11185" fg:w="105"/><text x="18.7413%" y="78.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:50) (192 samples, 0.32%)</title><rect x="18.7938%" y="68" width="0.3174%" height="15" fill="rgb(235,93,37)" fg:x="11368" fg:w="192"/><text x="19.0438%" y="78.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:51) (92 samples, 0.15%)</title><rect x="19.1112%" y="68" width="0.1521%" height="15" fill="rgb(213,116,39)" fg:x="11560" fg:w="92"/><text x="19.3612%" y="78.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:56) (150 samples, 0.25%)</title><rect x="19.2633%" y="68" width="0.2480%" height="15" fill="rgb(222,207,29)" fg:x="11652" fg:w="150"/><text x="19.5133%" y="78.50"></text></g><g><title>_asdict (&lt;string&gt;:37) (117 samples, 0.19%)</title><rect x="19.3179%" y="84" width="0.1934%" height="15" fill="rgb(206,96,30)" fg:x="11685" fg:w="117"/><text x="19.5679%" y="94.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:58) (91 samples, 0.15%)</title><rect x="19.5113%" y="68" width="0.1504%" height="15" fill="rgb(218,138,4)" fg:x="11802" fg:w="91"/><text x="19.7613%" y="78.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:61) (63 samples, 0.10%)</title><rect x="19.6799%" y="68" width="0.1042%" height="15" fill="rgb(250,191,14)" fg:x="11904" fg:w="63"/><text x="19.9299%" y="78.50"></text></g><g><title>consistentbroadcast (BDT/dumbobft/core/consistentbroadcast.py:124) (117 samples, 0.19%)</title><rect x="19.9345%" y="68" width="0.1934%" height="15" fill="rgb(239,60,40)" fg:x="12058" fg:w="117"/><text x="20.1845%" y="78.50"></text></g><g><title>hash (BDT/dumbobft/core/consistentbroadcast.py:12) (117 samples, 0.19%)</title><rect x="19.9345%" y="84" width="0.1934%" height="15" fill="rgb(206,27,48)" fg:x="12058" fg:w="117"/><text x="20.1845%" y="94.50"></text></g><g><title>verify_signature (coincurve/utils.py:111) (117 samples, 0.19%)</title><rect x="20.5132%" y="100" width="0.1934%" height="15" fill="rgb(225,35,8)" fg:x="12408" fg:w="117"/><text x="20.7632%" y="110.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (1,179 samples, 1.95%)</title><rect x="20.7793%" y="100" width="1.9491%" height="15" fill="rgb(250,213,24)" fg:x="12569" fg:w="1179"/><text x="21.0293%" y="110.50">v..</text></g><g><title>consistentbroadcast (BDT/dumbobft/core/consistentbroadcast.py:126) (1,570 samples, 2.60%)</title><rect x="20.1362%" y="68" width="2.5956%" height="15" fill="rgb(247,123,22)" fg:x="12180" fg:w="1570"/><text x="20.3862%" y="78.50">co..</text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (1,553 samples, 2.57%)</title><rect x="20.1643%" y="84" width="2.5675%" height="15" fill="rgb(231,138,38)" fg:x="12197" fg:w="1553"/><text x="20.4143%" y="94.50">ec..</text></g><g><title>consistentbroadcast (BDT/dumbobft/core/consistentbroadcast.py:90) (84 samples, 0.14%)</title><rect x="22.7847%" y="68" width="0.1389%" height="15" fill="rgb(231,145,46)" fg:x="13782" fg:w="84"/><text x="23.0347%" y="78.50"></text></g><g><title>hash (BDT/dumbobft/core/consistentbroadcast.py:12) (83 samples, 0.14%)</title><rect x="22.7863%" y="84" width="0.1372%" height="15" fill="rgb(251,118,11)" fg:x="13783" fg:w="83"/><text x="23.0363%" y="94.50"></text></g><g><title>cbc_send (BDT/dumbobft/core/validatedagreement.py:143) (115 samples, 0.19%)</title><rect x="22.9269%" y="84" width="0.1901%" height="15" fill="rgb(217,147,25)" fg:x="13868" fg:w="115"/><text x="23.1769%" y="94.50"></text></g><g><title>vaba_send (BDT/dumbobft/core/validatedcommonsubset.py:99) (114 samples, 0.19%)</title><rect x="22.9285%" y="100" width="0.1885%" height="15" fill="rgb(247,81,37)" fg:x="13869" fg:w="114"/><text x="23.1785%" y="110.50"></text></g><g><title>vacs_send (BDT/dumbobft/core/dumbo.py:354) (113 samples, 0.19%)</title><rect x="22.9302%" y="116" width="0.1868%" height="15" fill="rgb(209,12,38)" fg:x="13870" fg:w="113"/><text x="23.1802%" y="126.50"></text></g><g><title>_send (BDT/dumbobft/core/dumbo.py:207) (113 samples, 0.19%)</title><rect x="22.9302%" y="132" width="0.1868%" height="15" fill="rgb(227,1,9)" fg:x="13870" fg:w="113"/><text x="23.1802%" y="142.50"></text></g><g><title>&lt;lambda&gt; (BDT/myexperiements/sockettest/dumbo_node.py:50) (113 samples, 0.19%)</title><rect x="22.9302%" y="148" width="0.1868%" height="15" fill="rgb(248,47,43)" fg:x="13870" fg:w="113"/><text x="23.1802%" y="158.50"></text></g><g><title>put_nowait (multiprocessing/queues.py:129) (112 samples, 0.19%)</title><rect x="22.9318%" y="164" width="0.1852%" height="15" fill="rgb(221,10,30)" fg:x="13871" fg:w="112"/><text x="23.1818%" y="174.50"></text></g><g><title>put (multiprocessing/queues.py:89) (103 samples, 0.17%)</title><rect x="22.9467%" y="180" width="0.1703%" height="15" fill="rgb(210,229,1)" fg:x="13880" fg:w="103"/><text x="23.1967%" y="190.50"></text></g><g><title>notify (threading.py:351) (101 samples, 0.17%)</title><rect x="22.9500%" y="196" width="0.1670%" height="15" fill="rgb(222,148,37)" fg:x="13882" fg:w="101"/><text x="23.2000%" y="206.50"></text></g><g><title>commit_send (BDT/dumbobft/core/validatedagreement.py:166) (62 samples, 0.10%)</title><rect x="23.1170%" y="84" width="0.1025%" height="15" fill="rgb(234,67,33)" fg:x="13983" fg:w="62"/><text x="23.3670%" y="94.50"></text></g><g><title>vaba_send (BDT/dumbobft/core/validatedcommonsubset.py:99) (61 samples, 0.10%)</title><rect x="23.1186%" y="100" width="0.1008%" height="15" fill="rgb(247,98,35)" fg:x="13984" fg:w="61"/><text x="23.3686%" y="110.50"></text></g><g><title>consistentbroadcast (BDT/dumbobft/core/consistentbroadcast.py:92) (241 samples, 0.40%)</title><rect x="22.9236%" y="68" width="0.3984%" height="15" fill="rgb(247,138,52)" fg:x="13866" fg:w="241"/><text x="23.1736%" y="78.50"></text></g><g><title>ecdsa_sign (BDT/crypto/ecdsa/ecdsa.py:15) (62 samples, 0.10%)</title><rect x="23.2195%" y="84" width="0.1025%" height="15" fill="rgb(213,79,30)" fg:x="14045" fg:w="62"/><text x="23.4695%" y="94.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:124) (129 samples, 0.21%)</title><rect x="23.3302%" y="68" width="0.2133%" height="15" fill="rgb(246,177,23)" fg:x="14112" fg:w="129"/><text x="23.5802%" y="78.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:138) (136 samples, 0.22%)</title><rect x="23.5683%" y="68" width="0.2248%" height="15" fill="rgb(230,62,27)" fg:x="14256" fg:w="136"/><text x="23.8183%" y="78.50"></text></g><g><title>broadcast (BDT/dumbobft/core/provablereliablebroadcast.py:81) (136 samples, 0.22%)</title><rect x="23.5683%" y="84" width="0.2248%" height="15" fill="rgb(216,154,8)" fg:x="14256" fg:w="136"/><text x="23.8183%" y="94.50"></text></g><g><title>prbc_send (BDT/dumbobft/core/dumbo.py:304) (136 samples, 0.22%)</title><rect x="23.5683%" y="100" width="0.2248%" height="15" fill="rgb(244,35,45)" fg:x="14256" fg:w="136"/><text x="23.8183%" y="110.50"></text></g><g><title>_send (BDT/dumbobft/core/dumbo.py:207) (136 samples, 0.22%)</title><rect x="23.5683%" y="116" width="0.2248%" height="15" fill="rgb(251,115,12)" fg:x="14256" fg:w="136"/><text x="23.8183%" y="126.50"></text></g><g><title>&lt;lambda&gt; (BDT/myexperiements/sockettest/dumbo_node.py:50) (136 samples, 0.22%)</title><rect x="23.5683%" y="132" width="0.2248%" height="15" fill="rgb(240,54,50)" fg:x="14256" fg:w="136"/><text x="23.8183%" y="142.50"></text></g><g><title>put_nowait (multiprocessing/queues.py:129) (136 samples, 0.22%)</title><rect x="23.5683%" y="148" width="0.2248%" height="15" fill="rgb(233,84,52)" fg:x="14256" fg:w="136"/><text x="23.8183%" y="158.50"></text></g><g><title>put (multiprocessing/queues.py:89) (133 samples, 0.22%)</title><rect x="23.5733%" y="164" width="0.2199%" height="15" fill="rgb(207,117,47)" fg:x="14259" fg:w="133"/><text x="23.8233%" y="174.50"></text></g><g><title>notify (threading.py:351) (128 samples, 0.21%)</title><rect x="23.5815%" y="180" width="0.2116%" height="15" fill="rgb(249,43,39)" fg:x="14264" fg:w="128"/><text x="23.8315%" y="190.50"></text></g><g><title>merkleVerify (BDT/honeybadgerbft/core/reliablebroadcast.py:123) (80 samples, 0.13%)</title><rect x="23.9370%" y="84" width="0.1323%" height="15" fill="rgb(209,38,44)" fg:x="14479" fg:w="80"/><text x="24.1870%" y="94.50"></text></g><g><title>merkleVerify (BDT/honeybadgerbft/core/reliablebroadcast.py:126) (85 samples, 0.14%)</title><rect x="24.0792%" y="84" width="0.1405%" height="15" fill="rgb(236,212,23)" fg:x="14565" fg:w="85"/><text x="24.3292%" y="94.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:148) (228 samples, 0.38%)</title><rect x="23.8675%" y="68" width="0.3769%" height="15" fill="rgb(242,79,21)" fg:x="14437" fg:w="228"/><text x="24.1175%" y="78.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:162) (230 samples, 0.38%)</title><rect x="24.3123%" y="68" width="0.3802%" height="15" fill="rgb(211,96,35)" fg:x="14706" fg:w="230"/><text x="24.5623%" y="78.50"></text></g><g><title>prbc_send (BDT/dumbobft/core/dumbo.py:304) (230 samples, 0.38%)</title><rect x="24.3123%" y="84" width="0.3802%" height="15" fill="rgb(253,215,40)" fg:x="14706" fg:w="230"/><text x="24.5623%" y="94.50"></text></g><g><title>_send (BDT/dumbobft/core/dumbo.py:207) (230 samples, 0.38%)</title><rect x="24.3123%" y="100" width="0.3802%" height="15" fill="rgb(211,81,21)" fg:x="14706" fg:w="230"/><text x="24.5623%" y="110.50"></text></g><g><title>&lt;lambda&gt; (BDT/myexperiements/sockettest/dumbo_node.py:50) (230 samples, 0.38%)</title><rect x="24.3123%" y="116" width="0.3802%" height="15" fill="rgb(208,190,38)" fg:x="14706" fg:w="230"/><text x="24.5623%" y="126.50"></text></g><g><title>put_nowait (multiprocessing/queues.py:129) (230 samples, 0.38%)</title><rect x="24.3123%" y="132" width="0.3802%" height="15" fill="rgb(235,213,38)" fg:x="14706" fg:w="230"/><text x="24.5623%" y="142.50"></text></g><g><title>put (multiprocessing/queues.py:89) (230 samples, 0.38%)</title><rect x="24.3123%" y="148" width="0.3802%" height="15" fill="rgb(237,122,38)" fg:x="14706" fg:w="230"/><text x="24.5623%" y="158.50"></text></g><g><title>notify (threading.py:351) (228 samples, 0.38%)</title><rect x="24.3156%" y="164" width="0.3769%" height="15" fill="rgb(244,218,35)" fg:x="14708" fg:w="228"/><text x="24.5656%" y="174.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:174) (64 samples, 0.11%)</title><rect x="24.7256%" y="68" width="0.1058%" height="15" fill="rgb(240,68,47)" fg:x="14956" fg:w="64"/><text x="24.9756%" y="78.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:175) (639 samples, 1.06%)</title><rect x="24.8314%" y="68" width="1.0564%" height="15" fill="rgb(210,16,53)" fg:x="15020" fg:w="639"/><text x="25.0814%" y="78.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (633 samples, 1.05%)</title><rect x="24.8413%" y="84" width="1.0465%" height="15" fill="rgb(235,124,12)" fg:x="15026" fg:w="633"/><text x="25.0913%" y="94.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (369 samples, 0.61%)</title><rect x="25.2777%" y="100" width="0.6100%" height="15" fill="rgb(224,169,11)" fg:x="15290" fg:w="369"/><text x="25.5277%" y="110.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:195) (125 samples, 0.21%)</title><rect x="25.9456%" y="68" width="0.2067%" height="15" fill="rgb(250,166,2)" fg:x="15694" fg:w="125"/><text x="26.1956%" y="78.50"></text></g><g><title>deserialize (charm/toolbox/pairinggroup.py:129) (255 samples, 0.42%)</title><rect x="26.3606%" y="180" width="0.4216%" height="15" fill="rgb(242,216,29)" fg:x="15945" fg:w="255"/><text x="26.6106%" y="190.50"></text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:103) (288 samples, 0.48%)</title><rect x="26.3474%" y="116" width="0.4761%" height="15" fill="rgb(230,116,27)" fg:x="15937" fg:w="288"/><text x="26.5974%" y="126.50"></text></g><g><title>&lt;listcomp&gt; (BDT/honeybadgerbft/core/honeybadger_block.py:103) (288 samples, 0.48%)</title><rect x="26.3474%" y="132" width="0.4761%" height="15" fill="rgb(228,99,48)" fg:x="15937" fg:w="288"/><text x="26.5974%" y="142.50"></text></g><g><title>tpke_deserialize (BDT/honeybadgerbft/core/honeybadger_block.py:21) (286 samples, 0.47%)</title><rect x="26.3507%" y="148" width="0.4728%" height="15" fill="rgb(253,11,6)" fg:x="15939" fg:w="286"/><text x="26.6007%" y="158.50"></text></g><g><title>deserialize1 (BDT/crypto/threshenc/tpke.py:44) (285 samples, 0.47%)</title><rect x="26.3523%" y="164" width="0.4712%" height="15" fill="rgb(247,143,39)" fg:x="15940" fg:w="285"/><text x="26.6023%" y="174.50"></text></g><g><title>verify_share (BDT/crypto/threshenc/tpke.py:149) (5,820 samples, 9.62%)</title><rect x="26.9343%" y="148" width="9.6217%" height="15" fill="rgb(236,97,10)" fg:x="16292" fg:w="5820"/><text x="27.1843%" y="158.50">verify_share (..</text></g><g><title>combine_shares (BDT/crypto/threshenc/tpke.py:163) (5,844 samples, 9.66%)</title><rect x="26.8962%" y="132" width="9.6614%" height="15" fill="rgb(233,208,19)" fg:x="16269" fg:w="5844"/><text x="27.1462%" y="142.50">combine_shares..</text></g><g><title>lagrange (BDT/crypto/threshenc/tpke.py:111) (74 samples, 0.12%)</title><rect x="43.8302%" y="164" width="0.1223%" height="15" fill="rgb(216,164,2)" fg:x="26512" fg:w="74"/><text x="44.0802%" y="174.50"></text></g><g><title>lagrange (BDT/crypto/threshenc/tpke.py:116) (79 samples, 0.13%)</title><rect x="43.9790%" y="164" width="0.1306%" height="15" fill="rgb(220,129,5)" fg:x="26602" fg:w="79"/><text x="44.2290%" y="174.50"></text></g><g><title>combine_shares (BDT/crypto/threshenc/tpke.py:167) (4,623 samples, 7.64%)</title><rect x="36.5577%" y="132" width="7.6428%" height="15" fill="rgb(242,17,10)" fg:x="22113" fg:w="4623"/><text x="36.8077%" y="142.50">combine_sh..</text></g><g><title>&lt;listcomp&gt; (BDT/crypto/threshenc/tpke.py:167) (4,584 samples, 7.58%)</title><rect x="36.6221%" y="148" width="7.5784%" height="15" fill="rgb(242,107,0)" fg:x="22152" fg:w="4584"/><text x="36.8721%" y="158.50">&lt;listcomp&gt;..</text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:123) (10,505 samples, 17.37%)</title><rect x="26.8781%" y="116" width="17.3671%" height="15" fill="rgb(251,28,31)" fg:x="16258" fg:w="10505"/><text x="27.1281%" y="126.50">honeybadger_block (BDT/hone..</text></g><g><title>hash (charm/toolbox/pairinggroup.py:98) (645 samples, 1.07%)</title><rect x="44.4171%" y="180" width="1.0663%" height="15" fill="rgb(233,223,10)" fg:x="26867" fg:w="645"/><text x="44.6671%" y="190.50"></text></g><g><title>verify_ciphertext (BDT/crypto/threshenc/tpke.py:141) (648 samples, 1.07%)</title><rect x="44.4154%" y="148" width="1.0713%" height="15" fill="rgb(215,21,27)" fg:x="26866" fg:w="648"/><text x="44.6654%" y="158.50"></text></g><g><title>hashH (BDT/crypto/threshenc/tpke.py:80) (647 samples, 1.07%)</title><rect x="44.4171%" y="164" width="1.0696%" height="15" fill="rgb(232,23,21)" fg:x="26867" fg:w="647"/><text x="44.6671%" y="174.50"></text></g><g><title>decrypt_share (BDT/crypto/threshenc/tpke.py:199) (1,022 samples, 1.69%)</title><rect x="44.4138%" y="132" width="1.6896%" height="15" fill="rgb(244,5,23)" fg:x="26865" fg:w="1022"/><text x="44.6638%" y="142.50"></text></g><g><title>verify_ciphertext (BDT/crypto/threshenc/tpke.py:142) (373 samples, 0.62%)</title><rect x="45.4867%" y="148" width="0.6167%" height="15" fill="rgb(226,81,46)" fg:x="27514" fg:w="373"/><text x="45.7367%" y="158.50"></text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:92) (1,337 samples, 2.21%)</title><rect x="44.4121%" y="116" width="2.2104%" height="15" fill="rgb(247,70,30)" fg:x="26864" fg:w="1337"/><text x="44.6621%" y="126.50">h..</text></g><g><title>decrypt_share (BDT/crypto/threshenc/tpke.py:204) (314 samples, 0.52%)</title><rect x="46.1034%" y="132" width="0.5191%" height="15" fill="rgb(212,68,19)" fg:x="27887" fg:w="314"/><text x="46.3534%" y="142.50"></text></g><g><title>_run_round (BDT/dumbobft/core/dumbo.py:443) (12,275 samples, 20.29%)</title><rect x="26.3375%" y="100" width="20.2933%" height="15" fill="rgb(240,187,13)" fg:x="15931" fg:w="12275"/><text x="26.5875%" y="110.50">_run_round (BDT/dumbobft/core/du..</text></g><g><title>run_bft (BDT/dumbobft/core/dumbo.py:212) (12,295 samples, 20.33%)</title><rect x="26.3127%" y="84" width="20.3263%" height="15" fill="rgb(223,113,26)" fg:x="15916" fg:w="12295"/><text x="26.5627%" y="94.50">run_bft (BDT/dumbobft/core/dumbo..</text></g><g><title>run (BDT/myexperiements/sockettest/dumbo_node.py:86) (12,312 samples, 20.35%)</title><rect x="26.3127%" y="68" width="20.3545%" height="15" fill="rgb(206,192,2)" fg:x="15916" fg:w="12312"/><text x="26.5627%" y="78.50">run (BDT/myexperiements/sockette..</text></g><g><title>_on_expiration (gevent/timeout.py:242) (105 samples, 0.17%)</title><rect x="51.6979%" y="84" width="0.1736%" height="15" fill="rgb(241,108,4)" fg:x="31271" fg:w="105"/><text x="51.9479%" y="94.50"></text></g><g><title>run (gevent/hub.py:647) (3,296 samples, 5.45%)</title><rect x="46.6671%" y="68" width="5.4490%" height="15" fill="rgb(247,173,49)" fg:x="28228" fg:w="3296"/><text x="46.9171%" y="78.50">run (ge..</text></g><g><title>add_event (gevent/select.py:221) (90 samples, 0.15%)</title><rect x="51.9673%" y="84" width="0.1488%" height="15" fill="rgb(224,114,35)" fg:x="31434" fg:w="90"/><text x="52.2173%" y="94.50"></text></g><g><title>validatedagreement (BDT/dumbobft/core/validatedagreement.py:291) (127 samples, 0.21%)</title><rect x="52.2104%" y="68" width="0.2100%" height="15" fill="rgb(245,159,27)" fg:x="31581" fg:w="127"/><text x="52.4604%" y="78.50"></text></g><g><title>getCoin (BDT/honeybadgerbft/core/commoncoin.py:115) (74 samples, 0.12%)</title><rect x="52.2980%" y="84" width="0.1223%" height="15" fill="rgb(245,172,44)" fg:x="31634" fg:w="74"/><text x="52.5480%" y="94.50"></text></g><g><title>verify_share (BDT/crypto/threshsig/boldyreva.py:132) (74 samples, 0.12%)</title><rect x="52.2980%" y="100" width="0.1223%" height="15" fill="rgb(236,23,11)" fg:x="31634" fg:w="74"/><text x="52.5480%" y="110.50"></text></g><g><title>cbc_validate (BDT/dumbobft/core/validators.py:23) (88 samples, 0.15%)</title><rect x="52.4550%" y="84" width="0.1455%" height="15" fill="rgb(205,117,38)" fg:x="31729" fg:w="88"/><text x="52.7050%" y="94.50"></text></g><g><title>hash (BDT/dumbobft/core/validators.py:5) (87 samples, 0.14%)</title><rect x="52.4567%" y="100" width="0.1438%" height="15" fill="rgb(237,72,25)" fg:x="31730" fg:w="87"/><text x="52.7067%" y="110.50"></text></g><g><title>validatedagreement (BDT/dumbobft/core/validatedagreement.py:335) (660 samples, 1.09%)</title><rect x="52.4550%" y="68" width="1.0911%" height="15" fill="rgb(244,70,9)" fg:x="31729" fg:w="660"/><text x="52.7050%" y="78.50"></text></g><g><title>cbc_validate (BDT/dumbobft/core/validators.py:25) (570 samples, 0.94%)</title><rect x="52.6038%" y="84" width="0.9423%" height="15" fill="rgb(217,125,39)" fg:x="31819" fg:w="570"/><text x="52.8538%" y="94.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (563 samples, 0.93%)</title><rect x="52.6154%" y="100" width="0.9308%" height="15" fill="rgb(235,36,10)" fg:x="31826" fg:w="563"/><text x="52.8654%" y="110.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (402 samples, 0.66%)</title><rect x="52.8816%" y="116" width="0.6646%" height="15" fill="rgb(251,123,47)" fg:x="31987" fg:w="402"/><text x="53.1316%" y="126.50"></text></g><g><title>vacs_predicate (BDT/dumbobft/core/dumbo.py:388) (422 samples, 0.70%)</title><rect x="53.6090%" y="84" width="0.6977%" height="15" fill="rgb(221,13,13)" fg:x="32427" fg:w="422"/><text x="53.8590%" y="94.50"></text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:14) (407 samples, 0.67%)</title><rect x="53.6338%" y="100" width="0.6729%" height="15" fill="rgb(238,131,9)" fg:x="32442" fg:w="407"/><text x="53.8838%" y="110.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (402 samples, 0.66%)</title><rect x="53.6420%" y="116" width="0.6646%" height="15" fill="rgb(211,50,8)" fg:x="32447" fg:w="402"/><text x="53.8920%" y="126.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (284 samples, 0.47%)</title><rect x="53.8371%" y="132" width="0.4695%" height="15" fill="rgb(245,182,24)" fg:x="32565" fg:w="284"/><text x="54.0871%" y="142.50"></text></g><g><title>validatedcommonsubset (BDT/dumbobft/core/validatedcommonsubset.py:140) (424 samples, 0.70%)</title><rect x="53.6090%" y="68" width="0.7010%" height="15" fill="rgb(242,14,37)" fg:x="32427" fg:w="424"/><text x="53.8590%" y="78.50"></text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:11) (164 samples, 0.27%)</title><rect x="54.5348%" y="116" width="0.2711%" height="15" fill="rgb(246,228,12)" fg:x="32987" fg:w="164"/><text x="54.7848%" y="126.50"></text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:12) (125 samples, 0.21%)</title><rect x="54.8059%" y="116" width="0.2067%" height="15" fill="rgb(213,55,15)" fg:x="33151" fg:w="125"/><text x="55.0559%" y="126.50"></text></g><g><title>hash (BDT/dumbobft/core/validators.py:5) (103 samples, 0.17%)</title><rect x="54.8423%" y="132" width="0.1703%" height="15" fill="rgb(209,9,3)" fg:x="33173" fg:w="103"/><text x="55.0923%" y="142.50"></text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:13) (125 samples, 0.21%)</title><rect x="55.0126%" y="116" width="0.2067%" height="15" fill="rgb(230,59,30)" fg:x="33276" fg:w="125"/><text x="55.2626%" y="126.50"></text></g><g><title>format (coincurve/keys.py:379) (494 samples, 0.82%)</title><rect x="56.5798%" y="148" width="0.8167%" height="15" fill="rgb(209,121,21)" fg:x="34224" fg:w="494"/><text x="56.8298%" y="158.50"></text></g><g><title>format (coincurve/keys.py:380) (169 samples, 0.28%)</title><rect x="57.3965%" y="148" width="0.2794%" height="15" fill="rgb(220,109,13)" fg:x="34718" fg:w="169"/><text x="57.6465%" y="158.50"></text></g><g><title>format (coincurve/keys.py:382) (82 samples, 0.14%)</title><rect x="57.6759%" y="148" width="0.1356%" height="15" fill="rgb(232,18,1)" fg:x="34887" fg:w="82"/><text x="57.9259%" y="158.50"></text></g><g><title>format (coincurve/keys.py:383) (487 samples, 0.81%)</title><rect x="57.8115%" y="148" width="0.8051%" height="15" fill="rgb(215,41,42)" fg:x="34969" fg:w="487"/><text x="58.0615%" y="158.50"></text></g><g><title>format (coincurve/keys.py:386) (311 samples, 0.51%)</title><rect x="58.6166%" y="148" width="0.5142%" height="15" fill="rgb(224,123,36)" fg:x="35456" fg:w="311"/><text x="58.8666%" y="158.50"></text></g><g><title>hash (BDT/crypto/ecdsa/ecdsa.py:11) (588 samples, 0.97%)</title><rect x="59.1903%" y="148" width="0.9721%" height="15" fill="rgb(240,125,3)" fg:x="35803" fg:w="588"/><text x="59.4403%" y="158.50"></text></g><g><title>hash (BDT/crypto/ecdsa/ecdsa.py:6) (207 samples, 0.34%)</title><rect x="60.1623%" y="148" width="0.3422%" height="15" fill="rgb(205,98,50)" fg:x="36391" fg:w="207"/><text x="60.4123%" y="158.50"></text></g><g><title>hash (BDT/crypto/ecdsa/ecdsa.py:8) (330 samples, 0.55%)</title><rect x="60.5046%" y="148" width="0.5456%" height="15" fill="rgb(205,185,37)" fg:x="36598" fg:w="330"/><text x="60.7546%" y="158.50"></text></g><g><title>verify_signature (coincurve/utils.py:109) (130 samples, 0.21%)</title><rect x="61.0981%" y="148" width="0.2149%" height="15" fill="rgb(238,207,15)" fg:x="36957" fg:w="130"/><text x="61.3481%" y="158.50"></text></g><g><title>verify_signature (coincurve/utils.py:111) (2,445 samples, 4.04%)</title><rect x="61.3130%" y="148" width="4.0421%" height="15" fill="rgb(213,199,42)" fg:x="37087" fg:w="2445"/><text x="61.5630%" y="158.50">veri..</text></g><g><title>verify_signature (coincurve/utils.py:116) (402 samples, 0.66%)</title><rect x="65.3832%" y="148" width="0.6646%" height="15" fill="rgb(235,201,11)" fg:x="39549" fg:w="402"/><text x="65.6332%" y="158.50"></text></g><g><title>sha256 (coincurve/utils.py:26) (350 samples, 0.58%)</title><rect x="65.4692%" y="164" width="0.5786%" height="15" fill="rgb(207,46,11)" fg:x="39601" fg:w="350"/><text x="65.7192%" y="174.50"></text></g><g><title>verify_signature (coincurve/utils.py:120) (146 samples, 0.24%)</title><rect x="66.1272%" y="148" width="0.2414%" height="15" fill="rgb(241,35,35)" fg:x="39999" fg:w="146"/><text x="66.3772%" y="158.50"></text></g><g><title>verify_signature (coincurve/utils.py:122) (220 samples, 0.36%)</title><rect x="66.3685%" y="148" width="0.3637%" height="15" fill="rgb(243,32,47)" fg:x="40145" fg:w="220"/><text x="66.6185%" y="158.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (20,020 samples, 33.10%)</title><rect x="66.7488%" y="148" width="33.0975%" height="15" fill="rgb(247,202,23)" fg:x="40375" fg:w="20020"/><text x="66.9988%" y="158.50">verify_signature (coincurve/utils.py:127)</text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:14) (27,016 samples, 44.66%)</title><rect x="55.2192%" y="116" width="44.6634%" height="15" fill="rgb(219,102,11)" fg:x="33401" fg:w="27016"/><text x="55.4692%" y="126.50">prbc_validate (BDT/dumbobft/core/validators.py:14)</text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (26,771 samples, 44.26%)</title><rect x="55.6243%" y="132" width="44.2584%" height="15" fill="rgb(243,110,44)" fg:x="33646" fg:w="26771"/><text x="55.8743%" y="142.50">ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19)</text></g><g><title>vacs_predicate (BDT/dumbobft/core/dumbo.py:388) (27,483 samples, 45.44%)</title><rect x="54.4687%" y="100" width="45.4355%" height="15" fill="rgb(222,74,54)" fg:x="32947" fg:w="27483"/><text x="54.7187%" y="110.50">vacs_predicate (BDT/dumbobft/core/dumbo.py:388)</text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset.py:109) (27,594 samples, 45.62%)</title><rect x="54.3414%" y="84" width="45.6190%" height="15" fill="rgb(216,99,12)" fg:x="32870" fg:w="27594"/><text x="54.5914%" y="94.50">vaba_predicate (BDT/dumbobft/core/validatedcommonsubset.py:109)</text></g><g><title>wait_for_cbc_to_continue (BDT/dumbobft/core/validatedagreement.py:219) (27,606 samples, 45.64%)</title><rect x="54.3298%" y="68" width="45.6388%" height="15" fill="rgb(226,22,26)" fg:x="32863" fg:w="27606"/><text x="54.5798%" y="78.50">wait_for_cbc_to_continue (BDT/dumbobft/core/validatedagreement.py:219)</text></g><g><title>all (60,488 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="60488"/><text x="0.2500%" y="62.50"></text></g></svg></svg>
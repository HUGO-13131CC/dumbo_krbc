?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --pid 2902</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="122510"><g><title>__init__ (selectors.py:347) (274 samples, 0.22%)</title><rect x="0.7338%" y="180" width="0.2237%" height="15" fill="rgb(227,0,7)" fg:x="899" fg:w="274"/><text x="0.9838%" y="190.50"></text></g><g><title>__init__ (selectors.py:212) (126 samples, 0.10%)</title><rect x="0.8546%" y="196" width="0.1028%" height="15" fill="rgb(217,0,24)" fg:x="1047" fg:w="126"/><text x="1.1046%" y="206.50"></text></g><g><title>wait (multiprocessing/connection.py:903) (744 samples, 0.61%)</title><rect x="0.6073%" y="164" width="0.6073%" height="15" fill="rgb(221,193,54)" fg:x="744" fg:w="744"/><text x="0.8573%" y="174.50"></text></g><g><title>__init__ (selectors.py:348) (315 samples, 0.26%)</title><rect x="0.9575%" y="180" width="0.2571%" height="15" fill="rgb(248,212,6)" fg:x="1173" fg:w="315"/><text x="1.2075%" y="190.50"></text></g><g><title>register (selectors.py:237) (451 samples, 0.37%)</title><rect x="1.4195%" y="196" width="0.3681%" height="15" fill="rgb(208,68,35)" fg:x="1739" fg:w="451"/><text x="1.6695%" y="206.50"></text></g><g><title>_fileobj_lookup (selectors.py:224) (246 samples, 0.20%)</title><rect x="1.5868%" y="212" width="0.2008%" height="15" fill="rgb(232,128,0)" fg:x="1944" fg:w="246"/><text x="1.8368%" y="222.50"></text></g><g><title>register (selectors.py:351) (655 samples, 0.53%)</title><rect x="1.3068%" y="180" width="0.5347%" height="15" fill="rgb(207,160,47)" fg:x="1601" fg:w="655"/><text x="1.5568%" y="190.50"></text></g><g><title>register (gevent/select.py:255) (199 samples, 0.16%)</title><rect x="1.9753%" y="196" width="0.1624%" height="15" fill="rgb(228,23,34)" fg:x="2420" fg:w="199"/><text x="2.2253%" y="206.50"></text></g><g><title>wait (multiprocessing/connection.py:905) (1,122 samples, 0.92%)</title><rect x="1.2277%" y="164" width="0.9158%" height="15" fill="rgb(218,30,26)" fg:x="1504" fg:w="1122"/><text x="1.4777%" y="174.50"></text></g><g><title>register (selectors.py:357) (344 samples, 0.28%)</title><rect x="1.8627%" y="180" width="0.2808%" height="15" fill="rgb(220,122,19)" fg:x="2282" fg:w="344"/><text x="2.1127%" y="190.50"></text></g><g><title>__init__ (gevent/select.py:207) (128 samples, 0.10%)</title><rect x="2.2259%" y="212" width="0.1045%" height="15" fill="rgb(250,228,42)" fg:x="2727" fg:w="128"/><text x="2.4759%" y="222.50"></text></g><g><title>poll (gevent/select.py:291) (335 samples, 0.27%)</title><rect x="2.2259%" y="196" width="0.2734%" height="15" fill="rgb(240,193,28)" fg:x="2727" fg:w="335"/><text x="2.4759%" y="206.50"></text></g><g><title>__init__ (gevent/select.py:208) (207 samples, 0.17%)</title><rect x="2.3304%" y="212" width="0.1690%" height="15" fill="rgb(216,20,37)" fg:x="2855" fg:w="207"/><text x="2.5804%" y="222.50"></text></g><g><title>_get_started_watchers (gevent/select.py:268) (132 samples, 0.11%)</title><rect x="2.6684%" y="212" width="0.1077%" height="15" fill="rgb(206,188,39)" fg:x="3269" fg:w="132"/><text x="2.9184%" y="222.50"></text></g><g><title>poll (gevent/select.py:292) (518 samples, 0.42%)</title><rect x="2.4994%" y="196" width="0.4228%" height="15" fill="rgb(217,207,13)" fg:x="3062" fg:w="518"/><text x="2.7494%" y="206.50"></text></g><g><title>__exit__ (gevent/timeout.py:358) (259 samples, 0.21%)</title><rect x="2.9540%" y="212" width="0.2114%" height="15" fill="rgb(231,73,38)" fg:x="3619" fg:w="259"/><text x="3.2040%" y="222.50"></text></g><g><title>start_new (gevent/timeout.py:261) (446 samples, 0.36%)</title><rect x="3.2912%" y="228" width="0.3641%" height="15" fill="rgb(225,20,46)" fg:x="4032" fg:w="446"/><text x="3.5412%" y="238.50"></text></g><g><title>__init__ (gevent/timeout.py:218) (187 samples, 0.15%)</title><rect x="3.5026%" y="244" width="0.1526%" height="15" fill="rgb(210,31,41)" fg:x="4291" fg:w="187"/><text x="3.7526%" y="254.50"></text></g><g><title>start (gevent/timeout.py:222) (165 samples, 0.13%)</title><rect x="3.6838%" y="244" width="0.1347%" height="15" fill="rgb(221,200,47)" fg:x="4513" fg:w="165"/><text x="3.9338%" y="254.50"></text></g><g><title>select (selectors.py:376) (2,153 samples, 1.76%)</title><rect x="2.2259%" y="180" width="1.7574%" height="15" fill="rgb(226,26,5)" fg:x="2727" fg:w="2153"/><text x="2.4759%" y="190.50"></text></g><g><title>poll (gevent/select.py:314) (1,300 samples, 1.06%)</title><rect x="2.9222%" y="196" width="1.0611%" height="15" fill="rgb(249,33,26)" fg:x="3580" fg:w="1300"/><text x="3.1722%" y="206.50"></text></g><g><title>_start_new_or_dummy (gevent/timeout.py:284) (988 samples, 0.81%)</title><rect x="3.1769%" y="212" width="0.8065%" height="15" fill="rgb(235,183,28)" fg:x="3892" fg:w="988"/><text x="3.4269%" y="222.50"></text></g><g><title>start_new (gevent/timeout.py:262) (402 samples, 0.33%)</title><rect x="3.6552%" y="228" width="0.3281%" height="15" fill="rgb(221,5,38)" fg:x="4478" fg:w="402"/><text x="3.9052%" y="238.50"></text></g><g><title>start (gevent/timeout.py:238) (186 samples, 0.15%)</title><rect x="3.8315%" y="244" width="0.1518%" height="15" fill="rgb(247,18,42)" fg:x="4694" fg:w="186"/><text x="4.0815%" y="254.50"></text></g><g><title>wait (multiprocessing/connection.py:911) (2,277 samples, 1.86%)</title><rect x="2.1647%" y="164" width="1.8586%" height="15" fill="rgb(241,131,45)" fg:x="2652" fg:w="2277"/><text x="2.4147%" y="174.50">w..</text></g><g><title>_poll (multiprocessing/connection.py:414) (4,847 samples, 3.96%)</title><rect x="0.5518%" y="148" width="3.9564%" height="15" fill="rgb(249,31,29)" fg:x="676" fg:w="4847"/><text x="0.8018%" y="158.50">_pol..</text></g><g><title>wait (multiprocessing/connection.py:918) (424 samples, 0.35%)</title><rect x="4.1621%" y="164" width="0.3461%" height="15" fill="rgb(225,111,53)" fg:x="5099" fg:w="424"/><text x="4.4121%" y="174.50"></text></g><g><title>__exit__ (selectors.py:202) (301 samples, 0.25%)</title><rect x="4.2625%" y="180" width="0.2457%" height="15" fill="rgb(238,160,17)" fg:x="5222" fg:w="301"/><text x="4.5125%" y="190.50"></text></g><g><title>close (selectors.py:270) (123 samples, 0.10%)</title><rect x="4.4078%" y="196" width="0.1004%" height="15" fill="rgb(214,148,48)" fg:x="5400" fg:w="123"/><text x="4.6578%" y="206.50"></text></g><g><title>get (multiprocessing/queues.py:104) (5,192 samples, 4.24%)</title><rect x="0.3273%" y="116" width="4.2380%" height="15" fill="rgb(232,36,49)" fg:x="401" fg:w="5192"/><text x="0.5773%" y="126.50">get (..</text></g><g><title>poll (multiprocessing/connection.py:257) (4,961 samples, 4.05%)</title><rect x="0.5159%" y="132" width="4.0495%" height="15" fill="rgb(209,103,24)" fg:x="632" fg:w="4961"/><text x="0.7659%" y="142.50">poll..</text></g><g><title>_recv (multiprocessing/connection.py:379) (6,578 samples, 5.37%)</title><rect x="4.9025%" y="164" width="5.3694%" height="15" fill="rgb(229,88,8)" fg:x="6006" fg:w="6578"/><text x="5.1525%" y="174.50">_recv (..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:407) (6,780 samples, 5.53%)</title><rect x="4.7996%" y="148" width="5.5342%" height="15" fill="rgb(213,181,19)" fg:x="5880" fg:w="6780"/><text x="5.0496%" y="158.50">_recv_b..</text></g><g><title>_recv (multiprocessing/connection.py:379) (1,121 samples, 0.92%)</title><rect x="10.4506%" y="164" width="0.9150%" height="15" fill="rgb(254,191,54)" fg:x="12803" fg:w="1121"/><text x="10.7006%" y="174.50"></text></g><g><title>recv_bytes (multiprocessing/connection.py:216) (8,113 samples, 6.62%)</title><rect x="4.7719%" y="132" width="6.6223%" height="15" fill="rgb(241,83,37)" fg:x="5846" fg:w="8113"/><text x="5.0219%" y="142.50">recv_byte..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:411) (1,223 samples, 1.00%)</title><rect x="10.3959%" y="148" width="0.9983%" height="15" fill="rgb(233,36,39)" fg:x="12736" fg:w="1223"/><text x="10.6459%" y="158.50"></text></g><g><title>get (multiprocessing/queues.py:108) (8,301 samples, 6.78%)</title><rect x="4.6233%" y="116" width="6.7758%" height="15" fill="rgb(226,3,54)" fg:x="5664" fg:w="8301"/><text x="4.8733%" y="126.50">get (mult..</text></g><g><title>get (multiprocessing/queues.py:113) (908 samples, 0.74%)</title><rect x="11.5101%" y="116" width="0.7412%" height="15" fill="rgb(245,192,40)" fg:x="14101" fg:w="908"/><text x="11.7601%" y="126.50"></text></g><g><title>_recv_loop (BDT/dumbobft/core/dumbo.py:158) (15,117 samples, 12.34%)</title><rect x="0.0180%" y="68" width="12.3394%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="15117"/><text x="0.2680%" y="78.50">_recv_loop (BDT/du..</text></g><g><title>&lt;lambda&gt; (BDT/myexperiements/sockettest/dumbo_node.py:51) (14,987 samples, 12.23%)</title><rect x="0.1241%" y="84" width="12.2333%" height="15" fill="rgb(232,182,51)" fg:x="152" fg:w="14987"/><text x="0.3741%" y="94.50">&lt;lambda&gt; (BDT/myex..</text></g><g><title>&lt;lambda&gt; (run_socket_node.py:118) (14,891 samples, 12.15%)</title><rect x="0.2024%" y="100" width="12.1549%" height="15" fill="rgb(231,60,39)" fg:x="248" fg:w="14891"/><text x="0.4524%" y="110.50">&lt;lambda&gt; (run_sock..</text></g><g><title>_recv_loop (BDT/dumbobft/core/dumbo.py:165) (178 samples, 0.15%)</title><rect x="12.3835%" y="68" width="0.1453%" height="15" fill="rgb(208,69,12)" fg:x="15171" fg:w="178"/><text x="12.6335%" y="78.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:50) (334 samples, 0.27%)</title><rect x="12.6610%" y="68" width="0.2726%" height="15" fill="rgb(235,93,37)" fg:x="15511" fg:w="334"/><text x="12.9110%" y="78.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:51) (256 samples, 0.21%)</title><rect x="12.9336%" y="68" width="0.2090%" height="15" fill="rgb(213,116,39)" fg:x="15845" fg:w="256"/><text x="13.1836%" y="78.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:56) (257 samples, 0.21%)</title><rect x="13.1426%" y="68" width="0.2098%" height="15" fill="rgb(222,207,29)" fg:x="16101" fg:w="257"/><text x="13.3926%" y="78.50"></text></g><g><title>_asdict (&lt;string&gt;:37) (196 samples, 0.16%)</title><rect x="13.1924%" y="84" width="0.1600%" height="15" fill="rgb(206,96,30)" fg:x="16162" fg:w="196"/><text x="13.4424%" y="94.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:58) (145 samples, 0.12%)</title><rect x="13.3524%" y="68" width="0.1184%" height="15" fill="rgb(218,138,4)" fg:x="16358" fg:w="145"/><text x="13.6024%" y="78.50"></text></g><g><title>broadcast_receiver_loop (BDT/dumbobft/core/dumbo.py:61) (144 samples, 0.12%)</title><rect x="13.4871%" y="68" width="0.1175%" height="15" fill="rgb(250,191,14)" fg:x="16523" fg:w="144"/><text x="13.7371%" y="78.50"></text></g><g><title>verify_signature (coincurve/utils.py:111) (126 samples, 0.10%)</title><rect x="13.9662%" y="100" width="0.1028%" height="15" fill="rgb(239,60,40)" fg:x="17110" fg:w="126"/><text x="14.2162%" y="110.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (1,171 samples, 0.96%)</title><rect x="14.1197%" y="100" width="0.9558%" height="15" fill="rgb(206,27,48)" fg:x="17298" fg:w="1171"/><text x="14.3697%" y="110.50"></text></g><g><title>consistentbroadcast (BDT/dumbobft/core/consistentbroadcast.py:126) (1,585 samples, 1.29%)</title><rect x="13.7834%" y="68" width="1.2938%" height="15" fill="rgb(225,35,8)" fg:x="16886" fg:w="1585"/><text x="14.0334%" y="78.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (1,567 samples, 1.28%)</title><rect x="13.7981%" y="84" width="1.2791%" height="15" fill="rgb(250,213,24)" fg:x="16904" fg:w="1567"/><text x="14.0481%" y="94.50"></text></g><g><title>consistentbroadcast (BDT/dumbobft/core/consistentbroadcast.py:92) (171 samples, 0.14%)</title><rect x="15.1955%" y="68" width="0.1396%" height="15" fill="rgb(247,123,22)" fg:x="18616" fg:w="171"/><text x="15.4455%" y="78.50"></text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:11) (128 samples, 0.10%)</title><rect x="15.4004%" y="100" width="0.1045%" height="15" fill="rgb(231,138,38)" fg:x="18867" fg:w="128"/><text x="15.6504%" y="110.50"></text></g><g><title>format (coincurve/keys.py:379) (375 samples, 0.31%)</title><rect x="16.1505%" y="132" width="0.3061%" height="15" fill="rgb(231,145,46)" fg:x="19786" fg:w="375"/><text x="16.4005%" y="142.50"></text></g><g><title>format (coincurve/keys.py:380) (154 samples, 0.13%)</title><rect x="16.4566%" y="132" width="0.1257%" height="15" fill="rgb(251,118,11)" fg:x="20161" fg:w="154"/><text x="16.7066%" y="142.50"></text></g><g><title>format (coincurve/keys.py:383) (399 samples, 0.33%)</title><rect x="16.6239%" y="132" width="0.3257%" height="15" fill="rgb(217,147,25)" fg:x="20366" fg:w="399"/><text x="16.8739%" y="142.50"></text></g><g><title>format (coincurve/keys.py:386) (237 samples, 0.19%)</title><rect x="16.9496%" y="132" width="0.1935%" height="15" fill="rgb(247,81,37)" fg:x="20765" fg:w="237"/><text x="17.1996%" y="142.50"></text></g><g><title>hash (BDT/crypto/ecdsa/ecdsa.py:11) (380 samples, 0.31%)</title><rect x="17.1635%" y="132" width="0.3102%" height="15" fill="rgb(209,12,38)" fg:x="21027" fg:w="380"/><text x="17.4135%" y="142.50"></text></g><g><title>hash (BDT/crypto/ecdsa/ecdsa.py:6) (165 samples, 0.13%)</title><rect x="17.4737%" y="132" width="0.1347%" height="15" fill="rgb(227,1,9)" fg:x="21407" fg:w="165"/><text x="17.7237%" y="142.50"></text></g><g><title>hash (BDT/crypto/ecdsa/ecdsa.py:8) (265 samples, 0.22%)</title><rect x="17.6100%" y="132" width="0.2163%" height="15" fill="rgb(248,47,43)" fg:x="21574" fg:w="265"/><text x="17.8600%" y="142.50"></text></g><g><title>verify_signature (coincurve/utils.py:111) (1,752 samples, 1.43%)</title><rect x="17.9365%" y="132" width="1.4301%" height="15" fill="rgb(221,10,30)" fg:x="21974" fg:w="1752"/><text x="18.1865%" y="142.50"></text></g><g><title>verify_signature (coincurve/utils.py:116) (306 samples, 0.25%)</title><rect x="19.3674%" y="132" width="0.2498%" height="15" fill="rgb(210,229,1)" fg:x="23727" fg:w="306"/><text x="19.6174%" y="142.50"></text></g><g><title>sha256 (coincurve/utils.py:26) (252 samples, 0.21%)</title><rect x="19.4115%" y="148" width="0.2057%" height="15" fill="rgb(222,148,37)" fg:x="23781" fg:w="252"/><text x="19.6615%" y="158.50"></text></g><g><title>verify_signature (coincurve/utils.py:122) (176 samples, 0.14%)</title><rect x="19.7372%" y="132" width="0.1437%" height="15" fill="rgb(234,67,33)" fg:x="24180" fg:w="176"/><text x="19.9872%" y="142.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (14,570 samples, 11.89%)</title><rect x="19.8857%" y="132" width="11.8929%" height="15" fill="rgb(247,98,35)" fg:x="24362" fg:w="14570"/><text x="20.1357%" y="142.50">verify_signature (..</text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:14) (19,793 samples, 16.16%)</title><rect x="15.6322%" y="100" width="16.1562%" height="15" fill="rgb(247,138,52)" fg:x="19151" fg:w="19793"/><text x="15.8822%" y="110.50">prbc_validate (BDT/dumbob..</text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (19,612 samples, 16.01%)</title><rect x="15.7799%" y="116" width="16.0085%" height="15" fill="rgb(213,79,30)" fg:x="19332" fg:w="19612"/><text x="16.0299%" y="126.50">ecdsa_vrfy (BDT/crypto/ec..</text></g><g><title>vacs_predicate (BDT/dumbobft/core/dumbo.py:388) (20,109 samples, 16.41%)</title><rect x="15.3767%" y="84" width="16.4142%" height="15" fill="rgb(246,177,23)" fg:x="18838" fg:w="20109"/><text x="15.6267%" y="94.50">vacs_predicate (BDT/dumbo..</text></g><g><title>predicate_pt (BDT/dumbobft/core/validatedcommonsubset_.py:142) (20,180 samples, 16.47%)</title><rect x="15.3359%" y="68" width="16.4721%" height="15" fill="rgb(230,62,27)" fg:x="18788" fg:w="20180"/><text x="15.5859%" y="78.50">predicate_pt (BDT/dumbobf..</text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:124) (343 samples, 0.28%)</title><rect x="31.8227%" y="68" width="0.2800%" height="15" fill="rgb(216,154,8)" fg:x="38986" fg:w="343"/><text x="32.0727%" y="78.50"></text></g><g><title>merkleVerify (BDT/honeybadgerbft/core/reliablebroadcast.py:121) (123 samples, 0.10%)</title><rect x="32.3361%" y="84" width="0.1004%" height="15" fill="rgb(244,35,45)" fg:x="39615" fg:w="123"/><text x="32.5861%" y="94.50"></text></g><g><title>merkleVerify (BDT/honeybadgerbft/core/reliablebroadcast.py:123) (200 samples, 0.16%)</title><rect x="32.4365%" y="84" width="0.1633%" height="15" fill="rgb(251,115,12)" fg:x="39738" fg:w="200"/><text x="32.6865%" y="94.50"></text></g><g><title>hash (BDT/honeybadgerbft/core/reliablebroadcast.py:78) (131 samples, 0.11%)</title><rect x="32.4929%" y="100" width="0.1069%" height="15" fill="rgb(240,54,50)" fg:x="39807" fg:w="131"/><text x="32.7429%" y="110.50"></text></g><g><title>merkleVerify (BDT/honeybadgerbft/core/reliablebroadcast.py:126) (167 samples, 0.14%)</title><rect x="32.6169%" y="84" width="0.1363%" height="15" fill="rgb(233,84,52)" fg:x="39959" fg:w="167"/><text x="32.8669%" y="94.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:148) (609 samples, 0.50%)</title><rect x="32.2668%" y="68" width="0.4971%" height="15" fill="rgb(207,117,47)" fg:x="39530" fg:w="609"/><text x="32.5168%" y="78.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:174) (166 samples, 0.14%)</title><rect x="32.8961%" y="68" width="0.1355%" height="15" fill="rgb(249,43,39)" fg:x="40301" fg:w="166"/><text x="33.1461%" y="78.50"></text></g><g><title>hash (BDT/dumbobft/core/provablereliablebroadcast.py:12) (146 samples, 0.12%)</title><rect x="32.9124%" y="84" width="0.1192%" height="15" fill="rgb(209,38,44)" fg:x="40321" fg:w="146"/><text x="33.1624%" y="94.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:175) (1,091 samples, 0.89%)</title><rect x="33.0316%" y="68" width="0.8905%" height="15" fill="rgb(236,212,23)" fg:x="40467" fg:w="1091"/><text x="33.2816%" y="78.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (1,065 samples, 0.87%)</title><rect x="33.0528%" y="84" width="0.8693%" height="15" fill="rgb(242,79,21)" fg:x="40493" fg:w="1065"/><text x="33.3028%" y="94.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (556 samples, 0.45%)</title><rect x="33.4683%" y="100" width="0.4538%" height="15" fill="rgb(211,96,35)" fg:x="41002" fg:w="556"/><text x="33.7183%" y="110.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:195) (135 samples, 0.11%)</title><rect x="33.9474%" y="68" width="0.1102%" height="15" fill="rgb(253,215,40)" fg:x="41589" fg:w="135"/><text x="34.1974%" y="78.50"></text></g><g><title>deserialize (charm/toolbox/pairinggroup.py:129) (191 samples, 0.16%)</title><rect x="34.1841%" y="180" width="0.1559%" height="15" fill="rgb(211,81,21)" fg:x="41879" fg:w="191"/><text x="34.4341%" y="190.50"></text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:103) (210 samples, 0.17%)</title><rect x="34.1817%" y="116" width="0.1714%" height="15" fill="rgb(208,190,38)" fg:x="41876" fg:w="210"/><text x="34.4317%" y="126.50"></text></g><g><title>&lt;listcomp&gt; (BDT/honeybadgerbft/core/honeybadger_block.py:103) (210 samples, 0.17%)</title><rect x="34.1817%" y="132" width="0.1714%" height="15" fill="rgb(235,213,38)" fg:x="41876" fg:w="210"/><text x="34.4317%" y="142.50"></text></g><g><title>tpke_deserialize (BDT/honeybadgerbft/core/honeybadger_block.py:21) (208 samples, 0.17%)</title><rect x="34.1833%" y="148" width="0.1698%" height="15" fill="rgb(237,122,38)" fg:x="41878" fg:w="208"/><text x="34.4333%" y="158.50"></text></g><g><title>deserialize1 (BDT/crypto/threshenc/tpke.py:44) (208 samples, 0.17%)</title><rect x="34.1833%" y="164" width="0.1698%" height="15" fill="rgb(244,218,35)" fg:x="41878" fg:w="208"/><text x="34.4333%" y="174.50"></text></g><g><title>verify_share (BDT/crypto/threshenc/tpke.py:149) (4,854 samples, 3.96%)</title><rect x="34.3907%" y="148" width="3.9621%" height="15" fill="rgb(240,68,47)" fg:x="42132" fg:w="4854"/><text x="34.6407%" y="158.50">veri..</text></g><g><title>combine_shares (BDT/crypto/threshenc/tpke.py:163) (4,869 samples, 3.97%)</title><rect x="34.3792%" y="132" width="3.9744%" height="15" fill="rgb(210,16,53)" fg:x="42118" fg:w="4869"/><text x="34.6292%" y="142.50">comb..</text></g><g><title>combine_shares (BDT/crypto/threshenc/tpke.py:167) (3,890 samples, 3.18%)</title><rect x="38.3536%" y="132" width="3.1753%" height="15" fill="rgb(235,124,12)" fg:x="46987" fg:w="3890"/><text x="38.6036%" y="142.50">com..</text></g><g><title>&lt;listcomp&gt; (BDT/crypto/threshenc/tpke.py:167) (3,866 samples, 3.16%)</title><rect x="38.3732%" y="148" width="3.1557%" height="15" fill="rgb(224,169,11)" fg:x="47011" fg:w="3866"/><text x="38.6232%" y="158.50">&lt;li..</text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:123) (8,784 samples, 7.17%)</title><rect x="34.3768%" y="116" width="7.1700%" height="15" fill="rgb(250,166,2)" fg:x="42115" fg:w="8784"/><text x="34.6268%" y="126.50">honeybadge..</text></g><g><title>hash (charm/toolbox/pairinggroup.py:98) (518 samples, 0.42%)</title><rect x="41.6366%" y="180" width="0.4228%" height="15" fill="rgb(242,216,29)" fg:x="51009" fg:w="518"/><text x="41.8866%" y="190.50"></text></g><g><title>verify_ciphertext (BDT/crypto/threshenc/tpke.py:141) (523 samples, 0.43%)</title><rect x="41.6342%" y="148" width="0.4269%" height="15" fill="rgb(230,116,27)" fg:x="51006" fg:w="523"/><text x="41.8842%" y="158.50"></text></g><g><title>hashH (BDT/crypto/threshenc/tpke.py:80) (522 samples, 0.43%)</title><rect x="41.6350%" y="164" width="0.4261%" height="15" fill="rgb(228,99,48)" fg:x="51007" fg:w="522"/><text x="41.8850%" y="174.50"></text></g><g><title>decrypt_share (BDT/crypto/threshenc/tpke.py:199) (849 samples, 0.69%)</title><rect x="41.6333%" y="132" width="0.6930%" height="15" fill="rgb(253,11,6)" fg:x="51005" fg:w="849"/><text x="41.8833%" y="142.50"></text></g><g><title>verify_ciphertext (BDT/crypto/threshenc/tpke.py:142) (325 samples, 0.27%)</title><rect x="42.0611%" y="148" width="0.2653%" height="15" fill="rgb(247,143,39)" fg:x="51529" fg:w="325"/><text x="42.3111%" y="158.50"></text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:92) (1,078 samples, 0.88%)</title><rect x="41.6325%" y="116" width="0.8799%" height="15" fill="rgb(236,97,10)" fg:x="51004" fg:w="1078"/><text x="41.8825%" y="126.50"></text></g><g><title>decrypt_share (BDT/crypto/threshenc/tpke.py:204) (228 samples, 0.19%)</title><rect x="42.3263%" y="132" width="0.1861%" height="15" fill="rgb(233,208,19)" fg:x="51854" fg:w="228"/><text x="42.5763%" y="142.50"></text></g><g><title>_run_round (BDT/dumbobft/core/dumbo.py:443) (10,214 samples, 8.34%)</title><rect x="34.1776%" y="100" width="8.3373%" height="15" fill="rgb(216,164,2)" fg:x="41871" fg:w="10214"/><text x="34.4276%" y="110.50">_run_round (..</text></g><g><title>run_bft (BDT/dumbobft/core/dumbo.py:212) (10,229 samples, 8.35%)</title><rect x="34.1695%" y="84" width="8.3495%" height="15" fill="rgb(220,129,5)" fg:x="41861" fg:w="10229"/><text x="34.4195%" y="94.50">run_bft (BDT..</text></g><g><title>run (BDT/myexperiements/sockettest/dumbo_node.py:86) (10,240 samples, 8.36%)</title><rect x="34.1695%" y="68" width="8.3585%" height="15" fill="rgb(242,17,10)" fg:x="41861" fg:w="10240"/><text x="34.4195%" y="78.50">run (BDT/mye..</text></g><g><title>_on_expiration (gevent/timeout.py:242) (860 samples, 0.70%)</title><rect x="65.6044%" y="84" width="0.7020%" height="15" fill="rgb(242,107,0)" fg:x="80372" fg:w="860"/><text x="65.8544%" y="94.50"></text></g><g><title>run (gevent/hub.py:647) (29,459 samples, 24.05%)</title><rect x="42.5280%" y="68" width="24.0462%" height="15" fill="rgb(251,28,31)" fg:x="52101" fg:w="29459"/><text x="42.7780%" y="78.50">run (gevent/hub.py:647)</text></g><g><title>add_event (gevent/select.py:221) (204 samples, 0.17%)</title><rect x="66.4076%" y="84" width="0.1665%" height="15" fill="rgb(233,223,10)" fg:x="81356" fg:w="204"/><text x="66.6576%" y="94.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (310 samples, 0.25%)</title><rect x="66.7268%" y="116" width="0.2530%" height="15" fill="rgb(215,21,27)" fg:x="81747" fg:w="310"/><text x="66.9768%" y="126.50"></text></g><g><title>vacs_predicate (BDT/dumbobft/core/dumbo.py:388) (427 samples, 0.35%)</title><rect x="66.6321%" y="68" width="0.3485%" height="15" fill="rgb(232,23,21)" fg:x="81631" fg:w="427"/><text x="66.8821%" y="78.50"></text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:14) (414 samples, 0.34%)</title><rect x="66.6427%" y="84" width="0.3379%" height="15" fill="rgb(244,5,23)" fg:x="81644" fg:w="414"/><text x="66.8927%" y="94.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (406 samples, 0.33%)</title><rect x="66.6493%" y="100" width="0.3314%" height="15" fill="rgb(226,81,46)" fg:x="81652" fg:w="406"/><text x="66.8993%" y="110.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (267 samples, 0.22%)</title><rect x="67.1317%" y="116" width="0.2179%" height="15" fill="rgb(247,70,30)" fg:x="82243" fg:w="267"/><text x="67.3817%" y="126.50"></text></g><g><title>validatedagreement (BDT/dumbobft/core/validatedagreement_.py:337) (427 samples, 0.35%)</title><rect x="67.0019%" y="68" width="0.3485%" height="15" fill="rgb(212,68,19)" fg:x="82084" fg:w="427"/><text x="67.2519%" y="78.50"></text></g><g><title>cbc_validate (BDT/dumbobft/core/validators.py:25) (353 samples, 0.29%)</title><rect x="67.0623%" y="84" width="0.2881%" height="15" fill="rgb(240,187,13)" fg:x="82158" fg:w="353"/><text x="67.3123%" y="94.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (353 samples, 0.29%)</title><rect x="67.0623%" y="100" width="0.2881%" height="15" fill="rgb(223,113,26)" fg:x="82158" fg:w="353"/><text x="67.3123%" y="110.50"></text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:149) (154 samples, 0.13%)</title><rect x="67.3953%" y="84" width="0.1257%" height="15" fill="rgb(206,192,2)" fg:x="82566" fg:w="154"/><text x="67.6453%" y="94.50"></text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:155) (10,381 samples, 8.47%)</title><rect x="67.5243%" y="84" width="8.4736%" height="15" fill="rgb(241,108,4)" fg:x="82724" fg:w="10381"/><text x="67.7743%" y="94.50">vaba_predica..</text></g><g><title>sleep (gevent/hub.py:154) (1,811 samples, 1.48%)</title><rect x="79.1797%" y="100" width="1.4782%" height="15" fill="rgb(247,173,49)" fg:x="97003" fg:w="1811"/><text x="79.4297%" y="110.50"></text></g><g><title>sleep (gevent/hub.py:155) (436 samples, 0.36%)</title><rect x="80.6579%" y="100" width="0.3559%" height="15" fill="rgb(224,114,35)" fg:x="98814" fg:w="436"/><text x="80.9079%" y="110.50"></text></g><g><title>sleep (gevent/hub.py:156) (261 samples, 0.21%)</title><rect x="81.0138%" y="100" width="0.2130%" height="15" fill="rgb(245,159,27)" fg:x="99250" fg:w="261"/><text x="81.2638%" y="110.50"></text></g><g><title>sleep (gevent/hub.py:157) (1,391 samples, 1.14%)</title><rect x="81.2268%" y="100" width="1.1354%" height="15" fill="rgb(245,172,44)" fg:x="99511" fg:w="1391"/><text x="81.4768%" y="110.50"></text></g><g><title>sleep (gevent/hub.py:158) (3,454 samples, 2.82%)</title><rect x="82.3623%" y="100" width="2.8194%" height="15" fill="rgb(236,23,11)" fg:x="100902" fg:w="3454"/><text x="82.6123%" y="110.50">sl..</text></g><g><title>sleep (gevent/hub.py:159) (17,102 samples, 13.96%)</title><rect x="85.1816%" y="100" width="13.9597%" height="15" fill="rgb(205,117,38)" fg:x="104356" fg:w="17102"/><text x="85.4316%" y="110.50">sleep (gevent/hub.py:..</text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:158) (29,023 samples, 23.69%)</title><rect x="75.9979%" y="84" width="23.6903%" height="15" fill="rgb(237,72,25)" fg:x="93105" fg:w="29023"/><text x="76.2479%" y="94.50">vaba_predicate (BDT/dumbobft/core/vali..</text></g><g><title>sleep (gevent/hub.py:166) (670 samples, 0.55%)</title><rect x="99.1413%" y="100" width="0.5469%" height="15" fill="rgb(244,70,9)" fg:x="121458" fg:w="670"/><text x="99.3913%" y="110.50"></text></g><g><title>wait_for_cbc_to_continue (BDT/dumbobft/core/validatedagreement_.py:219) (39,920 samples, 32.59%)</title><rect x="67.3937%" y="68" width="32.5851%" height="15" fill="rgb(217,125,39)" fg:x="82564" fg:w="39920"/><text x="67.6437%" y="78.50">wait_for_cbc_to_continue (BDT/dumbobft/core/validated..</text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:161) (312 samples, 0.25%)</title><rect x="99.7241%" y="84" width="0.2547%" height="15" fill="rgb(235,36,10)" fg:x="122172" fg:w="312"/><text x="99.9741%" y="94.50"></text></g><g><title>all (122,510 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="122510"/><text x="0.2500%" y="62.50"></text></g></svg></svg>
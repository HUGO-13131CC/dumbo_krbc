<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --pid 3743</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="220868"><g><title>poll (multiprocessing/connection.py:255) (464 samples, 0.21%)</title><rect x="0.9069%" y="132" width="0.2101%" height="15" fill="rgb(227,0,7)" fg:x="2003" fg:w="464"/><text x="1.1569%" y="142.50"></text></g><g><title>poll (multiprocessing/connection.py:256) (274 samples, 0.12%)</title><rect x="1.1170%" y="132" width="0.1241%" height="15" fill="rgb(217,0,24)" fg:x="2467" fg:w="274"/><text x="1.3670%" y="142.50"></text></g><g><title>__init__ (selectors.py:347) (1,016 samples, 0.46%)</title><rect x="1.8663%" y="180" width="0.4600%" height="15" fill="rgb(221,193,54)" fg:x="4122" fg:w="1016"/><text x="2.1163%" y="190.50"></text></g><g><title>__init__ (selectors.py:212) (380 samples, 0.17%)</title><rect x="2.1542%" y="196" width="0.1720%" height="15" fill="rgb(248,212,6)" fg:x="4758" fg:w="380"/><text x="2.4042%" y="206.50"></text></g><g><title>wait (multiprocessing/connection.py:903) (2,765 samples, 1.25%)</title><rect x="1.5199%" y="164" width="1.2519%" height="15" fill="rgb(208,68,35)" fg:x="3357" fg:w="2765"/><text x="1.7699%" y="174.50"></text></g><g><title>__init__ (selectors.py:348) (984 samples, 0.45%)</title><rect x="2.3263%" y="180" width="0.4455%" height="15" fill="rgb(232,128,0)" fg:x="5138" fg:w="984"/><text x="2.5763%" y="190.50"></text></g><g><title>__init__ (gevent/select.py:241) (271 samples, 0.12%)</title><rect x="2.6491%" y="196" width="0.1227%" height="15" fill="rgb(207,160,47)" fg:x="5851" fg:w="271"/><text x="2.8991%" y="206.50"></text></g><g><title>__new__ (&lt;string&gt;:14) (363 samples, 0.16%)</title><rect x="3.4088%" y="212" width="0.1644%" height="15" fill="rgb(228,23,34)" fg:x="7529" fg:w="363"/><text x="3.6588%" y="222.50"></text></g><g><title>_fileobj_to_fd (selectors.py:32) (301 samples, 0.14%)</title><rect x="3.6515%" y="228" width="0.1363%" height="15" fill="rgb(218,30,26)" fg:x="8065" fg:w="301"/><text x="3.9015%" y="238.50"></text></g><g><title>_fileobj_to_fd (selectors.py:36) (288 samples, 0.13%)</title><rect x="3.7887%" y="228" width="0.1304%" height="15" fill="rgb(220,122,19)" fg:x="8368" fg:w="288"/><text x="4.0387%" y="238.50"></text></g><g><title>register (selectors.py:237) (1,698 samples, 0.77%)</title><rect x="3.1671%" y="196" width="0.7688%" height="15" fill="rgb(250,228,42)" fg:x="6995" fg:w="1698"/><text x="3.4171%" y="206.50"></text></g><g><title>_fileobj_lookup (selectors.py:224) (778 samples, 0.35%)</title><rect x="3.5836%" y="212" width="0.3522%" height="15" fill="rgb(240,193,28)" fg:x="7915" fg:w="778"/><text x="3.8336%" y="222.50"></text></g><g><title>register (selectors.py:239) (318 samples, 0.14%)</title><rect x="3.9358%" y="196" width="0.1440%" height="15" fill="rgb(216,20,37)" fg:x="8693" fg:w="318"/><text x="4.1858%" y="206.50"></text></g><g><title>register (selectors.py:351) (2,534 samples, 1.15%)</title><rect x="2.9479%" y="180" width="1.1473%" height="15" fill="rgb(206,188,39)" fg:x="6511" fg:w="2534"/><text x="3.1979%" y="190.50"></text></g><g><title>get_fileno (gevent/select.py:68) (460 samples, 0.21%)</title><rect x="4.5000%" y="212" width="0.2083%" height="15" fill="rgb(217,207,13)" fg:x="9939" fg:w="460"/><text x="4.7500%" y="222.50"></text></g><g><title>register (gevent/select.py:255) (946 samples, 0.43%)</title><rect x="4.3886%" y="196" width="0.4283%" height="15" fill="rgb(231,73,38)" fg:x="9693" fg:w="946"/><text x="4.6386%" y="206.50"></text></g><g><title>register (selectors.py:357) (1,497 samples, 0.68%)</title><rect x="4.1541%" y="180" width="0.6778%" height="15" fill="rgb(225,20,46)" fg:x="9175" fg:w="1497"/><text x="4.4041%" y="190.50"></text></g><g><title>wait (multiprocessing/connection.py:905) (4,486 samples, 2.03%)</title><rect x="2.8026%" y="164" width="2.0311%" height="15" fill="rgb(210,31,41)" fg:x="6190" fg:w="4486"/><text x="3.0526%" y="174.50">w..</text></g><g><title>__init__ (gevent/select.py:207) (271 samples, 0.12%)</title><rect x="4.9663%" y="212" width="0.1227%" height="15" fill="rgb(221,200,47)" fg:x="10969" fg:w="271"/><text x="5.2163%" y="222.50"></text></g><g><title>poll (gevent/select.py:291) (934 samples, 0.42%)</title><rect x="4.9663%" y="196" width="0.4229%" height="15" fill="rgb(226,26,5)" fg:x="10969" fg:w="934"/><text x="5.2163%" y="206.50"></text></g><g><title>__init__ (gevent/select.py:208) (663 samples, 0.30%)</title><rect x="5.0890%" y="212" width="0.3002%" height="15" fill="rgb(249,33,26)" fg:x="11240" fg:w="663"/><text x="5.3390%" y="222.50"></text></g><g><title>_get_started_watchers (gevent/select.py:267) (337 samples, 0.15%)</title><rect x="5.5640%" y="212" width="0.1526%" height="15" fill="rgb(235,183,28)" fg:x="12289" fg:w="337"/><text x="5.8140%" y="222.50"></text></g><g><title>_get_started_watchers (gevent/select.py:268) (494 samples, 0.22%)</title><rect x="5.7165%" y="212" width="0.2237%" height="15" fill="rgb(221,5,38)" fg:x="12626" fg:w="494"/><text x="5.9665%" y="222.50"></text></g><g><title>_get_started_watchers (gevent/select.py:271) (416 samples, 0.19%)</title><rect x="6.0611%" y="212" width="0.1883%" height="15" fill="rgb(247,18,42)" fg:x="13387" fg:w="416"/><text x="6.3111%" y="222.50"></text></g><g><title>poll (gevent/select.py:292) (1,904 samples, 0.86%)</title><rect x="5.3892%" y="196" width="0.8621%" height="15" fill="rgb(241,131,45)" fg:x="11903" fg:w="1904"/><text x="5.6392%" y="206.50"></text></g><g><title>close (gevent/timeout.py:308) (296 samples, 0.13%)</title><rect x="6.4192%" y="228" width="0.1340%" height="15" fill="rgb(249,31,29)" fg:x="14178" fg:w="296"/><text x="6.6692%" y="238.50"></text></g><g><title>__exit__ (gevent/timeout.py:358) (838 samples, 0.38%)</title><rect x="6.3015%" y="212" width="0.3794%" height="15" fill="rgb(225,111,53)" fg:x="13918" fg:w="838"/><text x="6.5515%" y="222.50"></text></g><g><title>__init__ (gevent/timeout.py:202) (270 samples, 0.12%)</title><rect x="7.1527%" y="244" width="0.1222%" height="15" fill="rgb(238,160,17)" fg:x="15798" fg:w="270"/><text x="7.4027%" y="254.50"></text></g><g><title>start_new (gevent/timeout.py:261) (1,606 samples, 0.73%)</title><rect x="6.9345%" y="228" width="0.7271%" height="15" fill="rgb(214,148,48)" fg:x="15316" fg:w="1606"/><text x="7.1845%" y="238.50"></text></g><g><title>__init__ (gevent/timeout.py:218) (633 samples, 0.29%)</title><rect x="7.3750%" y="244" width="0.2866%" height="15" fill="rgb(232,36,49)" fg:x="16289" fg:w="633"/><text x="7.6250%" y="254.50"></text></g><g><title>start (gevent/timeout.py:222) (411 samples, 0.19%)</title><rect x="7.7367%" y="244" width="0.1861%" height="15" fill="rgb(209,103,24)" fg:x="17088" fg:w="411"/><text x="7.9867%" y="254.50"></text></g><g><title>start_new (gevent/timeout.py:262) (1,276 samples, 0.58%)</title><rect x="7.6616%" y="228" width="0.5777%" height="15" fill="rgb(229,88,8)" fg:x="16922" fg:w="1276"/><text x="7.9116%" y="238.50"></text></g><g><title>start (gevent/timeout.py:238) (637 samples, 0.29%)</title><rect x="7.9509%" y="244" width="0.2884%" height="15" fill="rgb(213,181,19)" fg:x="17561" fg:w="637"/><text x="8.2009%" y="254.50"></text></g><g><title>select (selectors.py:376) (7,232 samples, 3.27%)</title><rect x="4.9663%" y="180" width="3.2744%" height="15" fill="rgb(254,191,54)" fg:x="10969" fg:w="7232"/><text x="5.2163%" y="190.50">sel..</text></g><g><title>poll (gevent/select.py:314) (4,394 samples, 1.99%)</title><rect x="6.2512%" y="196" width="1.9894%" height="15" fill="rgb(241,83,37)" fg:x="13807" fg:w="4394"/><text x="6.5012%" y="206.50">p..</text></g><g><title>_start_new_or_dummy (gevent/timeout.py:284) (3,358 samples, 1.52%)</title><rect x="6.7203%" y="212" width="1.5204%" height="15" fill="rgb(233,36,39)" fg:x="14843" fg:w="3358"/><text x="6.9703%" y="222.50"></text></g><g><title>wait (multiprocessing/connection.py:911) (7,454 samples, 3.37%)</title><rect x="4.8730%" y="164" width="3.3749%" height="15" fill="rgb(226,3,54)" fg:x="10763" fg:w="7454"/><text x="5.1230%" y="174.50">wai..</text></g><g><title>wait (multiprocessing/connection.py:916) (353 samples, 0.16%)</title><rect x="8.2905%" y="164" width="0.1598%" height="15" fill="rgb(245,192,40)" fg:x="18311" fg:w="353"/><text x="8.5405%" y="174.50"></text></g><g><title>close (selectors.py:269) (445 samples, 0.20%)</title><rect x="8.7518%" y="196" width="0.2015%" height="15" fill="rgb(238,167,29)" fg:x="19330" fg:w="445"/><text x="9.0018%" y="206.50"></text></g><g><title>_poll (multiprocessing/connection.py:414) (17,134 samples, 7.76%)</title><rect x="1.3741%" y="148" width="7.7576%" height="15" fill="rgb(232,182,51)" fg:x="3035" fg:w="17134"/><text x="1.6241%" y="158.50">_poll (mult..</text></g><g><title>wait (multiprocessing/connection.py:918) (1,466 samples, 0.66%)</title><rect x="8.4680%" y="164" width="0.6637%" height="15" fill="rgb(231,60,39)" fg:x="18703" fg:w="1466"/><text x="8.7180%" y="174.50"></text></g><g><title>__exit__ (selectors.py:202) (1,116 samples, 0.51%)</title><rect x="8.6264%" y="180" width="0.5053%" height="15" fill="rgb(208,69,12)" fg:x="19053" fg:w="1116"/><text x="8.8764%" y="190.50"></text></g><g><title>close (selectors.py:270) (394 samples, 0.18%)</title><rect x="8.9533%" y="196" width="0.1784%" height="15" fill="rgb(235,93,37)" fg:x="19775" fg:w="394"/><text x="9.2033%" y="206.50"></text></g><g><title>get (multiprocessing/queues.py:104) (18,674 samples, 8.45%)</title><rect x="0.7566%" y="116" width="8.4548%" height="15" fill="rgb(213,116,39)" fg:x="1671" fg:w="18674"/><text x="1.0066%" y="126.50">get (multipr..</text></g><g><title>poll (multiprocessing/connection.py:257) (17,604 samples, 7.97%)</title><rect x="1.2410%" y="132" width="7.9704%" height="15" fill="rgb(222,207,29)" fg:x="2741" fg:w="17604"/><text x="1.4910%" y="142.50">poll (multi..</text></g><g><title>get (multiprocessing/queues.py:105) (497 samples, 0.23%)</title><rect x="9.2114%" y="116" width="0.2250%" height="15" fill="rgb(206,96,30)" fg:x="20345" fg:w="497"/><text x="9.4614%" y="126.50"></text></g><g><title>_recv (multiprocessing/connection.py:379) (5,133 samples, 2.32%)</title><rect x="9.5433%" y="164" width="2.3240%" height="15" fill="rgb(218,138,4)" fg:x="21078" fg:w="5133"/><text x="9.7933%" y="174.50">_..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:407) (5,275 samples, 2.39%)</title><rect x="9.4980%" y="148" width="2.3883%" height="15" fill="rgb(250,191,14)" fg:x="20978" fg:w="5275"/><text x="9.7480%" y="158.50">_r..</text></g><g><title>_recv (multiprocessing/connection.py:379) (784 samples, 0.35%)</title><rect x="11.9171%" y="164" width="0.3550%" height="15" fill="rgb(239,60,40)" fg:x="26321" fg:w="784"/><text x="12.1671%" y="174.50"></text></g><g><title>recv_bytes (multiprocessing/connection.py:216) (6,177 samples, 2.80%)</title><rect x="9.4826%" y="132" width="2.7967%" height="15" fill="rgb(206,27,48)" fg:x="20944" fg:w="6177"/><text x="9.7326%" y="142.50">re..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:411) (835 samples, 0.38%)</title><rect x="11.9012%" y="148" width="0.3781%" height="15" fill="rgb(225,35,8)" fg:x="26286" fg:w="835"/><text x="12.1512%" y="158.50"></text></g><g><title>get (multiprocessing/queues.py:108) (6,288 samples, 2.85%)</title><rect x="9.4364%" y="116" width="2.8469%" height="15" fill="rgb(250,213,24)" fg:x="20842" fg:w="6288"/><text x="9.6864%" y="126.50">ge..</text></g><g><title>get (multiprocessing/queues.py:111) (541 samples, 0.24%)</title><rect x="12.2951%" y="116" width="0.2449%" height="15" fill="rgb(247,123,22)" fg:x="27156" fg:w="541"/><text x="12.5451%" y="126.50"></text></g><g><title>get (multiprocessing/queues.py:113) (463 samples, 0.21%)</title><rect x="12.5401%" y="116" width="0.2096%" height="15" fill="rgb(231,138,38)" fg:x="27697" fg:w="463"/><text x="12.7901%" y="126.50"></text></g><g><title>_recv_loop (BDT/dumbobft/core/dumbo.py:158) (28,554 samples, 12.93%)</title><rect x="0.0172%" y="68" width="12.9281%" height="15" fill="rgb(231,145,46)" fg:x="38" fg:w="28554"/><text x="0.2672%" y="78.50">_recv_loop (BDT/dum..</text></g><g><title>&lt;lambda&gt; (BDT/myexperiements/sockettest/dumbo_node.py:51) (27,901 samples, 12.63%)</title><rect x="0.3129%" y="84" width="12.6324%" height="15" fill="rgb(251,118,11)" fg:x="691" fg:w="27901"/><text x="0.5629%" y="94.50">&lt;lambda&gt; (BDT/myexp..</text></g><g><title>&lt;lambda&gt; (run_socket_node.py:118) (27,519 samples, 12.46%)</title><rect x="0.4858%" y="100" width="12.4595%" height="15" fill="rgb(217,147,25)" fg:x="1073" fg:w="27519"/><text x="0.7358%" y="110.50">&lt;lambda&gt; (run_socke..</text></g><g><title>get (multiprocessing/queues.py:99) (285 samples, 0.13%)</title><rect x="12.8163%" y="116" width="0.1290%" height="15" fill="rgb(247,81,37)" fg:x="28307" fg:w="285"/><text x="13.0663%" y="126.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (621 samples, 0.28%)</title><rect x="13.5828%" y="100" width="0.2812%" height="15" fill="rgb(209,12,38)" fg:x="30000" fg:w="621"/><text x="13.8328%" y="110.50"></text></g><g><title>consistentbroadcast (BDT/dumbobft/core/consistentbroadcast.py:126) (884 samples, 0.40%)</title><rect x="13.4646%" y="68" width="0.4002%" height="15" fill="rgb(227,1,9)" fg:x="29739" fg:w="884"/><text x="13.7146%" y="78.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (878 samples, 0.40%)</title><rect x="13.4673%" y="84" width="0.3975%" height="15" fill="rgb(248,47,43)" fg:x="29745" fg:w="878"/><text x="13.7173%" y="94.50"></text></g><g><title>format (coincurve/keys.py:379) (256 samples, 0.12%)</title><rect x="14.2411%" y="132" width="0.1159%" height="15" fill="rgb(221,10,30)" fg:x="31454" fg:w="256"/><text x="14.4911%" y="142.50"></text></g><g><title>format (coincurve/keys.py:383) (264 samples, 0.12%)</title><rect x="14.4159%" y="132" width="0.1195%" height="15" fill="rgb(210,229,1)" fg:x="31840" fg:w="264"/><text x="14.6659%" y="142.50"></text></g><g><title>hash (BDT/crypto/ecdsa/ecdsa.py:11) (294 samples, 0.13%)</title><rect x="14.6056%" y="132" width="0.1331%" height="15" fill="rgb(222,148,37)" fg:x="32259" fg:w="294"/><text x="14.8556%" y="142.50"></text></g><g><title>verify_signature (coincurve/utils.py:111) (1,255 samples, 0.57%)</title><rect x="14.9143%" y="132" width="0.5682%" height="15" fill="rgb(234,67,33)" fg:x="32941" fg:w="1255"/><text x="15.1643%" y="142.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (9,852 samples, 4.46%)</title><rect x="15.6632%" y="132" width="4.4606%" height="15" fill="rgb(247,98,35)" fg:x="34595" fg:w="9852"/><text x="15.9132%" y="142.50">verif..</text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:14) (13,413 samples, 6.07%)</title><rect x="14.0613%" y="100" width="6.0729%" height="15" fill="rgb(247,138,52)" fg:x="31057" fg:w="13413"/><text x="14.3113%" y="110.50">prbc_val..</text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (13,309 samples, 6.03%)</title><rect x="14.1084%" y="116" width="6.0258%" height="15" fill="rgb(213,79,30)" fg:x="31161" fg:w="13309"/><text x="14.3584%" y="126.50">ecdsa_vr..</text></g><g><title>vacs_predicate (BDT/dumbobft/core/dumbo.py:388) (13,610 samples, 6.16%)</title><rect x="13.9731%" y="84" width="6.1621%" height="15" fill="rgb(246,177,23)" fg:x="30862" fg:w="13610"/><text x="14.2231%" y="94.50">vacs_pre..</text></g><g><title>predicate_pt (BDT/dumbobft/core/validatedcommonsubset_.py:142) (13,660 samples, 6.18%)</title><rect x="13.9590%" y="68" width="6.1847%" height="15" fill="rgb(230,62,27)" fg:x="30831" fg:w="13660"/><text x="14.2090%" y="78.50">predicat..</text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:148) (335 samples, 0.15%)</title><rect x="20.3031%" y="68" width="0.1517%" height="15" fill="rgb(216,154,8)" fg:x="44843" fg:w="335"/><text x="20.5531%" y="78.50"></text></g><g><title>provablereliablebroadcast (BDT/dumbobft/core/provablereliablebroadcast.py:175) (655 samples, 0.30%)</title><rect x="20.5575%" y="68" width="0.2966%" height="15" fill="rgb(244,35,45)" fg:x="45405" fg:w="655"/><text x="20.8075%" y="78.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (645 samples, 0.29%)</title><rect x="20.5621%" y="84" width="0.2920%" height="15" fill="rgb(251,115,12)" fg:x="45415" fg:w="645"/><text x="20.8121%" y="94.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (373 samples, 0.17%)</title><rect x="20.6852%" y="100" width="0.1689%" height="15" fill="rgb(240,54,50)" fg:x="45687" fg:w="373"/><text x="20.9352%" y="110.50"></text></g><g><title>combine_shares (BDT/crypto/threshenc/tpke.py:163) (2,932 samples, 1.33%)</title><rect x="20.9990%" y="132" width="1.3275%" height="15" fill="rgb(233,84,52)" fg:x="46380" fg:w="2932"/><text x="21.2490%" y="142.50"></text></g><g><title>verify_share (BDT/crypto/threshenc/tpke.py:149) (2,911 samples, 1.32%)</title><rect x="21.0085%" y="148" width="1.3180%" height="15" fill="rgb(207,117,47)" fg:x="46401" fg:w="2911"/><text x="21.2585%" y="158.50"></text></g><g><title>combine_shares (BDT/crypto/threshenc/tpke.py:167) (2,424 samples, 1.10%)</title><rect x="22.3265%" y="132" width="1.0975%" height="15" fill="rgb(249,43,39)" fg:x="49312" fg:w="2424"/><text x="22.5765%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (BDT/crypto/threshenc/tpke.py:167) (2,406 samples, 1.09%)</title><rect x="22.3346%" y="148" width="1.0893%" height="15" fill="rgb(209,38,44)" fg:x="49330" fg:w="2406"/><text x="22.5846%" y="158.50"></text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:123) (5,372 samples, 2.43%)</title><rect x="20.9985%" y="116" width="2.4322%" height="15" fill="rgb(236,212,23)" fg:x="46379" fg:w="5372"/><text x="21.2485%" y="126.50">ho..</text></g><g><title>hash (charm/toolbox/pairinggroup.py:98) (316 samples, 0.14%)</title><rect x="23.4688%" y="180" width="0.1431%" height="15" fill="rgb(242,79,21)" fg:x="51835" fg:w="316"/><text x="23.7188%" y="190.50"></text></g><g><title>verify_ciphertext (BDT/crypto/threshenc/tpke.py:141) (321 samples, 0.15%)</title><rect x="23.4683%" y="148" width="0.1453%" height="15" fill="rgb(211,96,35)" fg:x="51834" fg:w="321"/><text x="23.7183%" y="158.50"></text></g><g><title>hashH (BDT/crypto/threshenc/tpke.py:80) (320 samples, 0.14%)</title><rect x="23.4688%" y="164" width="0.1449%" height="15" fill="rgb(253,215,40)" fg:x="51835" fg:w="320"/><text x="23.7188%" y="174.50"></text></g><g><title>decrypt_share (BDT/crypto/threshenc/tpke.py:199) (482 samples, 0.22%)</title><rect x="23.4679%" y="132" width="0.2182%" height="15" fill="rgb(211,81,21)" fg:x="51833" fg:w="482"/><text x="23.7179%" y="142.50"></text></g><g><title>honeybadger_block (BDT/honeybadgerbft/core/honeybadger_block.py:92) (615 samples, 0.28%)</title><rect x="23.4674%" y="116" width="0.2784%" height="15" fill="rgb(208,190,38)" fg:x="51832" fg:w="615"/><text x="23.7174%" y="126.50"></text></g><g><title>_run_round (BDT/dumbobft/core/dumbo.py:443) (6,231 samples, 2.82%)</title><rect x="20.9270%" y="100" width="2.8211%" height="15" fill="rgb(235,213,38)" fg:x="46221" fg:w="6231"/><text x="21.1770%" y="110.50">_r..</text></g><g><title>run_bft (BDT/dumbobft/core/dumbo.py:212) (6,244 samples, 2.83%)</title><rect x="20.9215%" y="84" width="2.8270%" height="15" fill="rgb(237,122,38)" fg:x="46209" fg:w="6244"/><text x="21.1715%" y="94.50">ru..</text></g><g><title>run (BDT/myexperiements/sockettest/dumbo_node.py:86) (6,248 samples, 2.83%)</title><rect x="20.9215%" y="68" width="2.8288%" height="15" fill="rgb(244,218,35)" fg:x="46209" fg:w="6248"/><text x="21.1715%" y="78.50">ru..</text></g><g><title>_on_expiration (gevent/timeout.py:242) (2,532 samples, 1.15%)</title><rect x="53.7891%" y="84" width="1.1464%" height="15" fill="rgb(240,68,47)" fg:x="118803" fg:w="2532"/><text x="54.0391%" y="94.50"></text></g><g><title>run (gevent/hub.py:647) (69,092 samples, 31.28%)</title><rect x="23.7504%" y="68" width="31.2820%" height="15" fill="rgb(210,16,53)" fg:x="52457" fg:w="69092"/><text x="24.0004%" y="78.50">run (gevent/hub.py:647)</text></g><g><title>vacs_predicate (BDT/dumbobft/core/dumbo.py:388) (311 samples, 0.14%)</title><rect x="55.0505%" y="68" width="0.1408%" height="15" fill="rgb(235,124,12)" fg:x="121589" fg:w="311"/><text x="55.3005%" y="78.50"></text></g><g><title>prbc_validate (BDT/dumbobft/core/validators.py:14) (303 samples, 0.14%)</title><rect x="55.0541%" y="84" width="0.1372%" height="15" fill="rgb(224,169,11)" fg:x="121597" fg:w="303"/><text x="55.3041%" y="94.50"></text></g><g><title>ecdsa_vrfy (BDT/crypto/ecdsa/ecdsa.py:19) (301 samples, 0.14%)</title><rect x="55.0551%" y="100" width="0.1363%" height="15" fill="rgb(250,166,2)" fg:x="121599" fg:w="301"/><text x="55.3051%" y="110.50"></text></g><g><title>verify_signature (coincurve/utils.py:127) (232 samples, 0.11%)</title><rect x="55.0863%" y="116" width="0.1050%" height="15" fill="rgb(242,216,29)" fg:x="121668" fg:w="232"/><text x="55.3363%" y="126.50"></text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:155) (24,701 samples, 11.18%)</title><rect x="55.3566%" y="84" width="11.1836%" height="15" fill="rgb(230,116,27)" fg:x="122265" fg:w="24701"/><text x="55.6066%" y="94.50">vaba_predicate (..</text></g><g><title>sleep (gevent/hub.py:154) (4,602 samples, 2.08%)</title><rect x="71.0257%" y="100" width="2.0836%" height="15" fill="rgb(228,99,48)" fg:x="156873" fg:w="4602"/><text x="71.2757%" y="110.50">s..</text></g><g><title>sleep (gevent/hub.py:155) (1,082 samples, 0.49%)</title><rect x="73.1093%" y="100" width="0.4899%" height="15" fill="rgb(253,11,6)" fg:x="161475" fg:w="1082"/><text x="73.3593%" y="110.50"></text></g><g><title>sleep (gevent/hub.py:156) (598 samples, 0.27%)</title><rect x="73.5992%" y="100" width="0.2707%" height="15" fill="rgb(247,143,39)" fg:x="162557" fg:w="598"/><text x="73.8492%" y="110.50"></text></g><g><title>sleep (gevent/hub.py:157) (3,183 samples, 1.44%)</title><rect x="73.8699%" y="100" width="1.4411%" height="15" fill="rgb(236,97,10)" fg:x="163155" fg:w="3183"/><text x="74.1199%" y="110.50"></text></g><g><title>sleep (gevent/hub.py:158) (8,637 samples, 3.91%)</title><rect x="75.3110%" y="100" width="3.9105%" height="15" fill="rgb(233,208,19)" fg:x="166338" fg:w="8637"/><text x="75.5610%" y="110.50">slee..</text></g><g><title>sleep (gevent/hub.py:159) (44,036 samples, 19.94%)</title><rect x="79.2215%" y="100" width="19.9377%" height="15" fill="rgb(216,164,2)" fg:x="174975" fg:w="44036"/><text x="79.4715%" y="110.50">sleep (gevent/hub.py:159)</text></g><g><title>vaba_predicate (BDT/dumbobft/core/validatedcommonsubset_.py:158) (73,588 samples, 33.32%)</title><rect x="66.5402%" y="84" width="33.3176%" height="15" fill="rgb(220,129,5)" fg:x="146966" fg:w="73588"/><text x="66.7902%" y="94.50">vaba_predicate (BDT/dumbobft/core/validatedcommonsubse..</text></g><g><title>sleep (gevent/hub.py:166) (1,543 samples, 0.70%)</title><rect x="99.1592%" y="100" width="0.6986%" height="15" fill="rgb(242,17,10)" fg:x="219011" fg:w="1543"/><text x="99.4092%" y="110.50"></text></g><g><title>wait_for_cbc_to_continue (BDT/dumbobft/core/validatedagreement_.py:219) (98,674 samples, 44.68%)</title><rect x="55.3172%" y="68" width="44.6756%" height="15" fill="rgb(242,107,0)" fg:x="122178" fg:w="98674"/><text x="55.5672%" y="78.50">wait_for_cbc_to_continue (BDT/dumbobft/core/validatedagreement_.py:219)</text></g><g><title>all (220,868 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="220868"/><text x="0.2500%" y="62.50"></text></g></svg></svg>